+./scripts/manual_testing/general.sh:main:14  openstack congress version list
+----+---------+----------------------+
| id | status  | updated              |
+----+---------+----------------------+
| v1 | CURRENT | 2013-08-12T17:42:13Z |
+----+---------+----------------------+
++./scripts/manual_testing/general.sh:main:15  sed -n 5p
++./scripts/manual_testing/general.sh:main:15  openstack congress datasource create --config username=admin --config tenant_name=admin --config auth_url=http://127.0.0.1/identity --config password=password --config poll_time=5 nova nova2 -f value
+./scripts/manual_testing/general.sh:main:15  UUID=3bf88455-8b22-4327-81d2-0189aea0325c
+./scripts/manual_testing/general.sh:main:16  openstack congress datasource actions show nova2
+-------------------------+-------------------------+--------------------------+
| action                  | args                    | description              |
+-------------------------+-------------------------+--------------------------+
| agents.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| agents.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| agents.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| agents.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| agents.create           | {'name': 'os', 'desc':  | Create a new agent       |
|                         | 'None'},                | build.                   |
|                         | {'name':                |                          |
|                         | 'architecture', 'desc': |                          |
|                         | 'None'},                |                          |
|                         | {'name': 'version',     |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'url', 'desc': |                          |
|                         | 'None'},                |                          |
|                         | {'name': 'md5hash',     |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'hypervisor',  |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| agents.delete           | {'name': 'id', 'desc':  | Deletes an existing      |
|                         | "id: The agent's id to  | agent build.             |
|                         | delete :returns: An     |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta"}    |                          |
|                         |                         |                          |
| agents.find             |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| agents.findall          |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| agents.list             | {'name': 'hypervisor',  | List all agent builds.   |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| agents.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| agents.update           | {'name': 'id', 'desc':  | Update an existing agent |
|                         | 'None'},                | build.                   |
|                         | {'name': 'version',     |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'url', 'desc': |                          |
|                         | 'None'},                |                          |
|                         | {'name': 'md5hash',     |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| agents.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| aggregates.add_hook     | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| aggregates.add_host     | {'name': 'aggregate',   | Add a host into the Host |
|                         | 'desc': 'None'},        | Aggregate.               |
|                         | {'name': 'host',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.alternate_se |                         |                          |
| rvice_type              |                         |                          |
| aggregates.completion_c |                         | The completion cache for |
| ache                    |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| aggregates.convert_into |                         |                          |
| _with_meta              |                         |                          |
| aggregates.create       | {'name': 'name',        | Create a new aggregate.  |
|                         | 'desc': 'None'},        |                          |
|                         | {'name':                |                          |
|                         | 'availability_zone',    |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.delete       | {'name': 'aggregate',   | Delete the specified     |
|                         | 'desc': 'aggregate: The | aggregate.               |
|                         | aggregate to delete     |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| aggregates.find         |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| aggregates.findall      |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| aggregates.get          | {'name': 'aggregate',   | Get details of the       |
|                         | 'desc': 'None'}         | specified aggregate.     |
|                         |                         |                          |
| aggregates.get_details  | {'name': 'aggregate',   | Get details of the       |
|                         | 'desc': 'None'}         | specified aggregate.     |
|                         |                         |                          |
| aggregates.list         |                         | Get a list of os-        |
|                         |                         | aggregates.              |
| aggregates.remove_host  | {'name': 'aggregate',   | Remove a host from the   |
|                         | 'desc': 'None'},        | Host Aggregate.          |
|                         | {'name': 'host',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.run_hooks    | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| aggregates.set_metadata | {'name': 'aggregate',   | Set aggregate metadata,  |
|                         | 'desc': 'None'},        | replacing the existing   |
|                         | {'name': 'metadata',    | metadata.                |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.update       | {'name': 'aggregate',   | Update the name and/or   |
|                         | 'desc': 'None'},        | availability zone.       |
|                         | {'name': 'values',      |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.write_to_com |                         |                          |
| pletion_cache           |                         |                          |
| assisted_volume_snapsho | {'name': 'cls', 'desc': | Add a new hook of        |
| ts.add_hook             | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| assisted_volume_snapsho |                         |                          |
| ts.alternate_service_ty |                         |                          |
| pe                      |                         |                          |
| assisted_volume_snapsho |                         | The completion cache for |
| ts.completion_cache     |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| assisted_volume_snapsho |                         |                          |
| ts.convert_into_with_me |                         |                          |
| ta                      |                         |                          |
| assisted_volume_snapsho |                         |                          |
| ts.create               |                         |                          |
| assisted_volume_snapsho | {'name': 'snapshot',    | Delete a specified       |
| ts.delete               | 'desc': 'snapshot: an   | assisted volume          |
|                         | assisted volume         | snapshot.                |
|                         | snapshot to delete'},   |                          |
|                         | {'name': 'delete_info', |                          |
|                         | 'desc': 'delete_info:   |                          |
|                         | Information for         |                          |
|                         | snapshot deletion       |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| assisted_volume_snapsho | {'name': 'cls', 'desc': | Run all hooks of         |
| ts.run_hooks            | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| assisted_volume_snapsho |                         |                          |
| ts.write_to_completion_ |                         |                          |
| cache                   |                         |                          |
| availability_zones.add_ | {'name': 'cls', 'desc': | Add a new hook of        |
| hook                    | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| availability_zones.alte |                         |                          |
| rnate_service_type      |                         |                          |
| availability_zones.comp |                         | The completion cache for |
| letion_cache            |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| availability_zones.conv |                         |                          |
| ert_into_with_meta      |                         |                          |
| availability_zones.find |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| availability_zones.find |                         | Find all items with      |
| all                     |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| availability_zones.list | {'name': 'detailed',    | Get a list of all        |
|                         | 'desc': 'detailed: If   | availability zones.      |
|                         | True, list availability |                          |
|                         | zones with details.     |                          |
|                         | :returns: list of :clas |                          |
|                         | s:`AvailabilityZone`'}  |                          |
|                         |                         |                          |
| availability_zones.run_ | {'name': 'cls', 'desc': | Run all hooks of         |
| hooks                   | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| availability_zones.writ |                         |                          |
| e_to_completion_cache   |                         |                          |
| cells.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| cells.alternate_service |                         |                          |
| _type                   |                         |                          |
| cells.capacities        | {'name': 'cell_name',   | Get capacities for a     |
|                         | 'desc': 'cell_name:     | cell.                    |
|                         | Name of the             |                          |
|                         | :class:`Cell` to get    |                          |
|                         | capacities for. :rtype: |                          |
|                         | :class:`Cell`'}         |                          |
|                         |                         |                          |
| cells.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| cells.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| cells.get               | {'name': 'cell_name',   | Get a cell.              |
|                         | 'desc': 'cell_name:     |                          |
|                         | Name of the             |                          |
|                         | :class:`Cell` to get.   |                          |
|                         | :rtype: :class:`Cell`'} |                          |
|                         |                         |                          |
| cells.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| cells.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| certs.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| certs.alternate_service |                         |                          |
| _type                   |                         |                          |
| certs.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| certs.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| certs.create            |                         | DEPRECATED Create a x509 |
|                         |                         | certificate for a user   |
|                         |                         | in tenant.               |
| certs.get               |                         | DEPRECATED Get root      |
|                         |                         | certificate.             |
| certs.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| certs.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| client.authenticate     |                         | Authenticate against the |
|                         |                         | server.  Normally this   |
|                         |                         | is called automatically  |
|                         |                         | when you first access    |
|                         |                         | the API, but you can     |
|                         |                         | call this method to      |
|                         |                         | force authentication     |
|                         |                         | right now.  Returns on   |
|                         |                         | success; raises :exc:`ex |
|                         |                         | ceptions.Unauthorized`   |
|                         |                         | if the credentials are   |
|                         |                         | wrong.                   |
| client.get_timings      |                         |                          |
|                         |                         |                          |
| client.reset_timings    |                         |                          |
|                         |                         |                          |
| client.set_management_u |                         |                          |
| rl                      |                         |                          |
| cloudpipe.add_hook      | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| cloudpipe.alternate_ser |                         |                          |
| vice_type               |                         |                          |
| cloudpipe.completion_ca |                         | The completion cache for |
| che                     |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| cloudpipe.convert_into_ |                         |                          |
| with_meta               |                         |                          |
| cloudpipe.create        | {'name': 'project',     | DEPRECATED Launch a      |
|                         | 'desc': 'project: UUID  | cloudpipe instance.      |
|                         | of the project (tenant) |                          |
|                         | for the cloudpipe'}     |                          |
|                         |                         |                          |
| cloudpipe.find          |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| cloudpipe.findall       |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| cloudpipe.list          |                         | DEPRECATED Get a list of |
|                         |                         | cloudpipe instances.     |
| cloudpipe.run_hooks     | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| cloudpipe.update        | {'name': 'address',     | DEPRECATED Configure     |
|                         | 'desc': 'address: IP    | cloudpipe parameters for |
|                         | address'},              | the project.  Update VPN |
|                         | {'name': 'port',        | address and port for all |
|                         | 'desc': 'port: Port     | networks associated with |
|                         | number :returns: An     | the project defined by   |
|                         | instance of novaclient. | authentication           |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| cloudpipe.write_to_comp |                         |                          |
| letion_cache            |                         |                          |
| flavor_access.add_hook  | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| flavor_access.add_tenan | {'name': 'flavor',      | Add a tenant to the      |
| t_access                | 'desc': 'None'},        | given flavor access      |
|                         | {'name': 'tenant',      | list.                    |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| flavor_access.alternate |                         |                          |
| _service_type           |                         |                          |
| flavor_access.completio |                         | The completion cache for |
| n_cache                 |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| flavor_access.convert_i |                         |                          |
| nto_with_meta           |                         |                          |
| flavor_access.find      |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavor_access.findall   |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavor_access.list      |                         |                          |
|                         |                         |                          |
| flavor_access.remove_te | {'name': 'flavor',      | Remove a tenant from the |
| nant_access             | 'desc': 'None'},        | given flavor access      |
|                         | {'name': 'tenant',      | list.                    |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| flavor_access.run_hooks | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| flavor_access.write_to_ |                         |                          |
| completion_cache        |                         |                          |
| flavors.add_hook        | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| flavors.alternate_servi |                         |                          |
| ce_type                 |                         |                          |
| flavors.completion_cach |                         | The completion cache for |
| e                       |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| flavors.convert_into_wi |                         |                          |
| th_meta                 |                         |                          |
| flavors.create          | {'name': 'name',        | Create a flavor.         |
|                         | 'desc': 'name:          |                          |
|                         | Descriptive name of the |                          |
|                         | flavor'},               |                          |
|                         | {'name': 'ram', 'desc': |                          |
|                         | 'ram: Memory in MB for  |                          |
|                         | the flavor'},           |                          |
|                         | {'name': 'vcpus',       |                          |
|                         | 'desc': 'vcpus: Number  |                          |
|                         | of VCPUs for the        |                          |
|                         | flavor'},               |                          |
|                         | {'name': 'disk',        |                          |
|                         | 'desc': 'disk: Size of  |                          |
|                         | local disk in GB'},     |                          |
|                         | {'name': 'flavorid',    |                          |
|                         | 'desc': 'flavorid: ID   |                          |
|                         | for the flavor          |                          |
|                         | (optional). You can use |                          |
|                         | the reserved  value     |                          |
|                         | ``"auto"`` to have Nova |                          |
|                         | generate a UUID for the |                          |
|                         | flavor in cases where   |                          |
|                         | you cannot simply pass  |                          |
|                         | ``None``.'},            |                          |
|                         | {'name': 'ephemeral',   |                          |
|                         | 'desc': 'swap: Swap     |                          |
|                         | space in MB'},          |                          |
|                         | {'name': 'swap',        |                          |
|                         | 'desc': 'rxtx_factor:   |                          |
|                         | RX/TX factor :returns:  |                          |
|                         | :class:`Flavor`'},      |                          |
|                         | {'name': 'rxtx_factor', |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'is_public',   |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| flavors.delete          | {'name': 'flavor',      | Delete a specific        |
|                         | 'desc': 'flavor: The ID | flavor.                  |
|                         | of the :class:`Flavor`  |                          |
|                         | to get. :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| flavors.find            |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavors.findall         |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavors.get             | {'name': 'flavor',      | Get a specific flavor.   |
|                         | 'desc': 'flavor: The ID |                          |
|                         | of the :class:`Flavor`  |                          |
|                         | to get. :returns:       |                          |
|                         | :class:`Flavor`'}       |                          |
|                         |                         |                          |
| flavors.list            | {'name': 'detailed',    | Get a list of all        |
|                         | 'desc': 'detailed:      | flavors.                 |
|                         | Whether flavor needs to |                          |
|                         | be return with details  |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'is_public',   |                          |
|                         | 'desc': 'is_public:     |                          |
|                         | Filter flavors with     |                          |
|                         | provided access type    |                          |
|                         | (optional).  None means |                          |
|                         | give all flavors and    |                          |
|                         | only admin has query    |                          |
|                         | access to all flavor    |                          |
|                         | types.'},               |                          |
|                         | {'name': 'marker',      |                          |
|                         | 'desc': 'marker: Begin  |                          |
|                         | returning flavors that  |                          |
|                         | appear later in the     |                          |
|                         | flavor  list than that  |                          |
|                         | represented by this     |                          |
|                         | flavor id               |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'min_disk',    |                          |
|                         | 'desc': 'min_disk:      |                          |
|                         | Filters the flavors by  |                          |
|                         | a minimum disk space,   |                          |
|                         | in GiB.'},              |                          |
|                         | {'name': 'min_ram',     |                          |
|                         | 'desc': 'min_ram:       |                          |
|                         | Filters the flavors by  |                          |
|                         | a minimum RAM, in       |                          |
|                         | MB.'},                  |                          |
|                         | {'name': 'limit',       |                          |
|                         | 'desc': 'limit: maximum |                          |
|                         | number of flavors to    |                          |
|                         | return (optional).'},   |                          |
|                         | {'name': 'sort_key',    |                          |
|                         | 'desc': 'sort_key:      |                          |
|                         | Flavors list sort key   |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'sort_dir',    |                          |
|                         | 'desc': 'sort_dir:      |                          |
|                         | Flavors list sort       |                          |
|                         | direction (optional).   |                          |
|                         | :returns: list of       |                          |
|                         | :class:`Flavor`.'}      |                          |
|                         |                         |                          |
| flavors.run_hooks       | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| flavors.write_to_comple |                         |                          |
| tion_cache              |                         |                          |
| hosts.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| hosts.alternate_service |                         |                          |
| _type                   |                         |                          |
| hosts.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| hosts.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| hosts.find              |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hosts.findall           |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hosts.get               | {'name': 'obj', 'desc': | DEPRECATED Describes     |
|                         | 'host: destination host | cpu/memory/hdd info for  |
|                         | name.'}                 | host.                    |
|                         |                         |                          |
| hosts.host_action       | {'name': 'obj', 'desc': | DEPRECATED Perform an    |
|                         | 'host: The host to      | action on a host.        |
|                         | perform an action'}     |                          |
|                         |                         |                          |
| hosts.list              |                         |                          |
|                         |                         |                          |
| hosts.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| hosts.update            | {'name': 'obj', 'desc': | DEPRECATED Update status |
|                         | 'None'}                 | or maintenance mode for  |
|                         |                         | the host.                |
| hosts.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| hypervisors.add_hook    | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| hypervisors.alternate_s |                         |                          |
| ervice_type             |                         |                          |
| hypervisors.completion_ |                         | The completion cache for |
| cache                   |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| hypervisors.convert_int |                         |                          |
| o_with_meta             |                         |                          |
| hypervisors.find        |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hypervisors.findall     |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hypervisors.get         | {'name': 'hypervisor',  | Get a specific           |
|                         | 'desc': 'hypervisor:    | hypervisor.              |
|                         | Either a Hypervisor     |                          |
|                         | object or an ID.        |                          |
|                         | Starting with           |                          |
|                         | microversion 2.53 the   |                          |
|                         | ID must be a UUID       |                          |
|                         | value.'}                |                          |
|                         |                         |                          |
| hypervisors.list        | {'name': 'obj', 'desc': | Get a list of            |
|                         | 'detailed: Include a    | hypervisors.             |
|                         | detailed response.'}    |                          |
|                         |                         |                          |
| hypervisors.run_hooks   | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| hypervisors.search      | {'name':                | Get a list of matching   |
|                         | 'hypervisor_match',     | hypervisors.             |
|                         | 'desc':                 |                          |
|                         | 'hypervisor_match: The  |                          |
|                         | hypervisor host name or |                          |
|                         | a portion of it.  The   |                          |
|                         | hypervisor hosts are    |                          |
|                         | selected with the host  |                          |
|                         | name matching  this     |                          |
|                         | pattern.'},             |                          |
|                         | {'name': 'servers',     |                          |
|                         | 'desc': 'servers: If    |                          |
|                         | True, server            |                          |
|                         | information is also     |                          |
|                         | retrieved.'}            |                          |
|                         |                         |                          |
| hypervisors.statistics  |                         | Get hypervisor           |
|                         |                         | statistics over all      |
|                         |                         | compute nodes.  Kept for |
|                         |                         | backwards compatibility, |
|                         |                         | new code should call hyp |
|                         |                         | ervisor_stats.statistics |
|                         |                         | () instead of            |
|                         |                         | hypervisors.statistics() |
| hypervisors.uptime      | {'name': 'hypervisor',  | Get the uptime for a     |
|                         | 'desc': 'hypervisor:    | specific hypervisor.     |
|                         | Either a Hypervisor     |                          |
|                         | object or an ID.        |                          |
|                         | Starting with           |                          |
|                         | microversion 2.53 the   |                          |
|                         | ID must be a UUID       |                          |
|                         | value.'}                |                          |
|                         |                         |                          |
| hypervisors.write_to_co |                         |                          |
| mpletion_cache          |                         |                          |
| images.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| images.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| images.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| images.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| images.find_image       | {'name': 'name_or_id',  | Find an image by name or |
|                         | 'desc': 'None'}         | id (user provided        |
|                         |                         | input).                  |
| images.list             |                         | Get a detailed list of   |
|                         |                         | all images.  :rtype:     |
|                         |                         | list of :class:`Image`   |
| images.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| images.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| instance_action.add_hoo | {'name': 'cls', 'desc': | Add a new hook of        |
| k                       | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| instance_action.alterna |                         |                          |
| te_service_type         |                         |                          |
| instance_action.complet |                         | The completion cache for |
| ion_cache               |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| instance_action.convert |                         |                          |
| _into_with_meta         |                         |                          |
| instance_action.find    |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| instance_action.findall |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| instance_action.get     | {'name': 'server',      | Get details of an action |
|                         | 'desc': 'request_id:    | performed on an          |
|                         | The request_id of the   | instance.                |
|                         | action to get.'},       |                          |
|                         | {'name': 'request_id',  |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| instance_action.list    | {'name': 'server',      | Get a list of actions    |
|                         | 'desc': 'None'}         | performed on a server.   |
|                         |                         |                          |
| instance_action.run_hoo | {'name': 'cls', 'desc': | Run all hooks of         |
| ks                      | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| instance_action.write_t |                         |                          |
| o_completion_cache      |                         |                          |
| keypairs.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| keypairs.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| keypairs.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| keypairs.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| keypairs.create         | {'name': 'obj', 'desc': | Create a keypair         |
|                         | 'name: name for the     |                          |
|                         | keypair to create'}     |                          |
|                         |                         |                          |
| keypairs.delete         | {'name': 'obj', 'desc': | Delete a keypair         |
|                         | 'key: The               |                          |
|                         | :class:`Keypair` (or    |                          |
|                         | its ID) to delete.'}    |                          |
|                         |                         |                          |
| keypairs.find           |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| keypairs.findall        |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| keypairs.get            | {'name': 'obj', 'desc': | Get a keypair.           |
|                         | 'keypair: The ID of the |                          |
|                         | keypair to get.'}       |                          |
|                         |                         |                          |
| keypairs.list           | {'name': 'obj', 'desc': | Get a list of keypairs.  |
|                         | 'user_id: Id of key-    |                          |
|                         | pairs owner (Admin      |                          |
|                         | only).'}                |                          |
|                         |                         |                          |
| keypairs.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| keypairs.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| limits.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| limits.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| limits.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| limits.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| limits.get              | {'name': 'reserved',    | Get a specific           |
|                         | 'desc': 'None'},        | extension.  :rtype:      |
|                         | {'name': 'tenant_id',   | :class:`Limits`          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| limits.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| limits.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| list_extensions.add_hoo | {'name': 'cls', 'desc': | Add a new hook of        |
| k                       | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| list_extensions.alterna |                         |                          |
| te_service_type         |                         |                          |
| list_extensions.complet |                         | The completion cache for |
| ion_cache               |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| list_extensions.convert |                         |                          |
| _into_with_meta         |                         |                          |
| list_extensions.run_hoo | {'name': 'cls', 'desc': | Run all hooks of         |
| ks                      | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| list_extensions.show_al |                         |                          |
| l                       |                         |                          |
| list_extensions.write_t |                         |                          |
| o_completion_cache      |                         |                          |
| migrations.add_hook     | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| migrations.alternate_se |                         |                          |
| rvice_type              |                         |                          |
| migrations.completion_c |                         | The completion cache for |
| ache                    |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| migrations.convert_into |                         |                          |
| _with_meta              |                         |                          |
| migrations.find         |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| migrations.findall      |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| migrations.list         | {'name': 'host',        | Get a list of            |
|                         | 'desc': 'host:          | migrations.              |
|                         | (optional) filter       |                          |
|                         | migrations by host      |                          |
|                         | name.'},                |                          |
|                         | {'name': 'status',      |                          |
|                         | 'desc': 'status:        |                          |
|                         | (optional) filter       |                          |
|                         | migrations by           |                          |
|                         | status.'},              |                          |
|                         | {'name': 'cell_name',   |                          |
|                         | 'desc': 'cell_name:     |                          |
|                         | (optional) filter       |                          |
|                         | migrations for a        |                          |
|                         | cell.'},                |                          |
|                         | {'name':                |                          |
|                         | 'instance_uuid',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| migrations.run_hooks    | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| migrations.write_to_com |                         |                          |
| pletion_cache           |                         |                          |
| networks.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| networks.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| networks.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| networks.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| networks.find_network   | {'name': 'name',        | Find a network by name   |
|                         | 'desc': 'None'}         | (user provided input).   |
|                         |                         |                          |
| networks.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| networks.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| quota_classes.add_hook  | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| quota_classes.alternate |                         |                          |
| _service_type           |                         |                          |
| quota_classes.completio |                         | The completion cache for |
| n_cache                 |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| quota_classes.convert_i |                         |                          |
| nto_with_meta           |                         |                          |
| quota_classes.get       |                         |                          |
|                         |                         |                          |
| quota_classes.run_hooks | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| quota_classes.update    |                         |                          |
|                         |                         |                          |
| quota_classes.write_to_ |                         |                          |
| completion_cache        |                         |                          |
| quotas.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| quotas.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| quotas.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| quotas.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| quotas.defaults         |                         |                          |
|                         |                         |                          |
| quotas.delete           | {'name': 'tenant_id',   | Delete quota for a       |
|                         | 'desc': 'tenant_id: A   | tenant or for a user.    |
|                         | tenant for which quota  |                          |
|                         | is to be deleted'},     |                          |
|                         | {'name': 'user_id',     |                          |
|                         | 'desc': 'user_id: A     |                          |
|                         | user for which quota is |                          |
|                         | to be deleted :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| quotas.get              |                         |                          |
|                         |                         |                          |
| quotas.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| quotas.update           |                         |                          |
|                         |                         |                          |
| quotas.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| server_external_events. | {'name': 'cls', 'desc': | Add a new hook of        |
| add_hook                | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| server_external_events. |                         |                          |
| alternate_service_type  |                         |                          |
| server_external_events. |                         | The completion cache for |
| completion_cache        |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| server_external_events. |                         |                          |
| convert_into_with_meta  |                         |                          |
| server_external_events. | {'name': 'events',      | Create one or more       |
| create                  | 'desc': 'None'}         | server events.           |
|                         |                         | :param:events: A list of |
|                         |                         | dictionaries containing  |
|                         |                         | 'server_uuid', 'name',   |
|                         |                         | 'status', and 'tag'      |
|                         |                         | (which may be absent)    |
| server_external_events. | {'name': 'cls', 'desc': | Run all hooks of         |
| run_hooks               | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| server_external_events. |                         |                          |
| write_to_completion_cac |                         |                          |
| he                      |                         |                          |
| server_groups.add_hook  | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| server_groups.alternate |                         |                          |
| _service_type           |                         |                          |
| server_groups.completio |                         | The completion cache for |
| n_cache                 |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| server_groups.convert_i |                         |                          |
| nto_with_meta           |                         |                          |
| server_groups.create    | {'name': 'name',        | Create (allocate) a      |
|                         | 'desc': 'name: The name | server group.            |
|                         | of the server group.'}, |                          |
|                         | {'name': 'policies',    |                          |
|                         | 'desc': 'policies:      |                          |
|                         | Policy name or a list   |                          |
|                         | of exactly one policy   |                          |
|                         | name to  associate with |                          |
|                         | the server group.       |                          |
|                         | :rtype: list of         |                          |
|                         | :class:`ServerGroup`'}  |                          |
|                         |                         |                          |
| server_groups.delete    | {'name': 'id', 'desc':  | Delete a specific server |
|                         | 'id: The ID of the      | group.                   |
|                         | :class:`ServerGroup` to |                          |
|                         | delete. :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| server_groups.find      |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_groups.findall   |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_groups.get       | {'name': 'id', 'desc':  | Get a specific server    |
|                         | 'id: The ID of the      | group.                   |
|                         | :class:`ServerGroup` to |                          |
|                         | get. :rtype:            |                          |
|                         | :class:`ServerGroup`'}  |                          |
|                         |                         |                          |
| server_groups.list      | {'name':                | Get a list of all server |
|                         | 'all_projects', 'desc': | groups.                  |
|                         | 'all_projects: Lists    |                          |
|                         | server groups for all   |                          |
|                         | projects. (optional)'}, |                          |
|                         | {'name': 'limit',       |                          |
|                         | 'desc': 'limit: Maximum |                          |
|                         | number of server groups |                          |
|                         | to return.              |                          |
|                         | (optional)'},           |                          |
|                         | {'name': 'offset',      |                          |
|                         | 'desc': 'offset: Use    |                          |
|                         | with `limit` to return  |                          |
|                         | a slice of server       |                          |
|                         | groups. `offset` is     |                          |
|                         | where to start in the   |                          |
|                         | groups  list.           |                          |
|                         | (optional) :returns:    |                          |
|                         | list of                 |                          |
|                         | :class:`ServerGroup`.'} |                          |
|                         |                         |                          |
| server_groups.run_hooks | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| server_groups.write_to_ |                         |                          |
| completion_cache        |                         |                          |
| server_migrations.add_h | {'name': 'cls', 'desc': | Add a new hook of        |
| ook                     | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| server_migrations.alter |                         |                          |
| nate_service_type       |                         |                          |
| server_migrations.compl |                         | The completion cache for |
| etion_cache             |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| server_migrations.conve |                         |                          |
| rt_into_with_meta       |                         |                          |
| server_migrations.find  |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_migrations.finda |                         | Find all items with      |
| ll                      |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_migrations.get   | {'name': 'obj', 'desc': | Get a migration of a     |
|                         | 'server: The            | specified server         |
|                         | :class:`Server` (or its |                          |
|                         | ID)'}                   |                          |
|                         |                         |                          |
| server_migrations.list  | {'name': 'obj', 'desc': | Get a migrations list of |
|                         | 'server: The            | a specified server       |
|                         | :class:`Server` (or its |                          |
|                         | ID) :returns: An        |                          |
|                         | instance of novaclient. |                          |
|                         | base.ListWithMeta'}     |                          |
|                         |                         |                          |
| server_migrations.live_ | {'name': 'obj', 'desc': | Force on-going live      |
| migrate_force_complete  | 'server: The            | migration to complete    |
|                         | :class:`Server` (or its |                          |
|                         | ID)'}                   |                          |
|                         |                         |                          |
| server_migrations.live_ | {'name': 'obj', 'desc': | Cancel an ongoing live   |
| migration_abort         | 'server: The            | migration                |
|                         | :class:`Server` (or its |                          |
|                         | ID)'}                   |                          |
|                         |                         |                          |
| server_migrations.run_h | {'name': 'cls', 'desc': | Run all hooks of         |
| ooks                    | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| server_migrations.write |                         |                          |
| _to_completion_cache    |                         |                          |
| servers.add_fixed_ip    | {'name': 'obj', 'desc': | DEPRECATED Add an IP     |
|                         | 'server: The            | address on a network.    |
|                         | :class:`Server` (or its |                          |
|                         | ID) to add an IP to.'}  |                          |
|                         |                         |                          |
| servers.add_floating_ip | {'name': 'obj', 'desc': | DEPRECATED Add a         |
|                         | 'server: The            | floating IP to an        |
|                         | :class:`Server` (or its | instance                 |
|                         | ID) to add an IP to.'}  |                          |
|                         |                         |                          |
| servers.add_hook        | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| servers.add_security_gr | {'name': 'server',      | Add a Security Group to  |
| oup                     | 'desc': 'server: ID of  | an instance              |
|                         | the instance.'},        |                          |
|                         | {'name':                |                          |
|                         | 'security_group',       |                          |
|                         | 'desc':                 |                          |
|                         | 'security_group: The    |                          |
|                         | name of security group  |                          |
|                         | to add. :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.DictWithMeta'}     |                          |
|                         |                         |                          |
| servers.add_tag         | {'name': 'obj', 'desc': | Add single tag to an     |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.alternate_servi |                         |                          |
| ce_type                 |                         |                          |
| servers.backup          | {'name': 'server',      | Backup a server          |
|                         | 'desc': 'server: The    | instance.                |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'backup_name', |                          |
|                         | 'desc': 'backup_name:   |                          |
|                         | Name of the backup      |                          |
|                         | image'},                |                          |
|                         | {'name': 'backup_type', |                          |
|                         | 'desc': "backup_type:   |                          |
|                         | The backup type, like   |                          |
|                         | 'daily' or 'weekly'"},  |                          |
|                         | {'name': 'rotation',    |                          |
|                         | 'desc': 'rotation: Int  |                          |
|                         | parameter representing  |                          |
|                         | how many backups to     |                          |
|                         | keep around. :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta   |                          |
|                         | if the request          |                          |
|                         | microversion is < 2.45, |                          |
|                         | otherwise novaclient.ba |                          |
|                         | se.DictWithMeta.'}      |                          |
|                         |                         |                          |
| servers.change_password | {'name': 'server',      | Update the password for  |
|                         | 'desc': 'server: The    | a server.                |
|                         | :class:`Server` (or its |                          |
|                         | ID) for which the admin |                          |
|                         | password is to be       |                          |
|                         | changed :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'},   |                          |
|                         | {'name': 'password',    |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| servers.clear_password  | {'name': 'server',      | Clear the admin password |
|                         | 'desc': 'server: The    | of an instance  Remove   |
|                         | :class:`Server` (or its | the admin password for   |
|                         | ID) for which the admin | an instance from the     |
|                         | password is to be       | metadata server.         |
|                         | cleared'}               |                          |
|                         |                         |                          |
| servers.completion_cach |                         | The completion cache for |
| e                       |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| servers.confirm_resize  | {'name': 'server',      | Confirm that the resize  |
|                         | 'desc': 'server: The    | worked, thus removing    |
|                         | :class:`Server` (or its | the original server.     |
|                         | ID) to share onto.      |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.convert_into_wi |                         |                          |
| th_meta                 |                         |                          |
| servers.create          | {'name': 'name',        | Create (boot) a new      |
|                         | 'desc': 'name:          | server.                  |
|                         | Something to name the   |                          |
|                         | server.'},              |                          |
|                         | {'name': 'image',       |                          |
|                         | 'desc': 'image: The     |                          |
|                         | :class:`Image` to boot  |                          |
|                         | with.'},                |                          |
|                         | {'name': 'flavor',      |                          |
|                         | 'desc': 'flavor: The    |                          |
|                         | :class:`Flavor` to boot |                          |
|                         | onto.'},                |                          |
|                         | {'name': 'meta',        |                          |
|                         | 'desc': 'meta: A dict   |                          |
|                         | of arbitrary key/value  |                          |
|                         | metadata to store for   |                          |
|                         | this  server. Both keys |                          |
|                         | and values must be      |                          |
|                         | <=255 characters.'},    |                          |
|                         | {'name': 'files',       |                          |
|                         | 'desc': 'files: A dict  |                          |
|                         | of files to overwrite   |                          |
|                         | on the server upon      |                          |
|                         | boot.  Keys are file    |                          |
|                         | names (i.e.             |                          |
|                         | ``/etc/passwd``) and    |                          |
|                         | values  are the file    |                          |
|                         | contents (either as a   |                          |
|                         | string or as a  file-   |                          |
|                         | like object). A maximum |                          |
|                         | of five entries is      |                          |
|                         | allowed,  and each file |                          |
|                         | must be 10k or less.'}, |                          |
|                         | {'name':                |                          |
|                         | 'reservation_id',       |                          |
|                         | 'desc':                 |                          |
|                         | 'reservation_id: a UUID |                          |
|                         | for the set of servers  |                          |
|                         | being requested.'},     |                          |
|                         | {'name': 'min_count',   |                          |
|                         | 'desc': 'min_count:     |                          |
|                         | (optional extension)    |                          |
|                         | The minimum number of   |                          |
|                         | servers to launch.'},   |                          |
|                         | {'name': 'max_count',   |                          |
|                         | 'desc': 'max_count:     |                          |
|                         | (optional extension)    |                          |
|                         | The maximum number of   |                          |
|                         | servers to launch.'},   |                          |
|                         | {'name':                |                          |
|                         | 'security_groups',      |                          |
|                         | 'desc':                 |                          |
|                         | 'security_groups: A     |                          |
|                         | list of security group  |                          |
|                         | names'},                |                          |
|                         | {'name': 'userdata',    |                          |
|                         | 'desc': 'userdata: user |                          |
|                         | data to pass to be      |                          |
|                         | exposed by the metadata |                          |
|                         | server this can be a    |                          |
|                         | file type object as     |                          |
|                         | well or a  string.'},   |                          |
|                         | {'name': 'key_name',    |                          |
|                         | 'desc': 'key_name:      |                          |
|                         | (optional extension)    |                          |
|                         | name of previously      |                          |
|                         | created  keypair to     |                          |
|                         | inject into the         |                          |
|                         | instance.'},            |                          |
|                         | {'name':                |                          |
|                         | 'availability_zone',    |                          |
|                         | 'desc':                 |                          |
|                         | 'availability_zone:     |                          |
|                         | Name of the             |                          |
|                         | availability zone for   |                          |
|                         | instance  placement.'}, |                          |
|                         | {'name':                |                          |
|                         | 'block_device_mapping', |                          |
|                         | 'desc':                 |                          |
|                         | 'block_device_mapping:  |                          |
|                         | (optional extension) A  |                          |
|                         | dict of block  device   |                          |
|                         | mappings for this       |                          |
|                         | server.'},              |                          |
|                         | {'name': 'block_device_ |                          |
|                         | mapping_v2', 'desc': 'b |                          |
|                         | lock_device_mapping_v2: |                          |
|                         | (optional extension) A  |                          |
|                         | dict of block  device   |                          |
|                         | mappings for this       |                          |
|                         | server.'},              |                          |
|                         | {'name': 'nics',        |                          |
|                         | 'desc': "nics: An       |                          |
|                         | ordered list of nics    |                          |
|                         | (dicts) to be added to  |                          |
|                         | this  server, with      |                          |
|                         | information about       |                          |
|                         | connected networks,     |                          |
|                         | fixed IPs, port etc.    |                          |
|                         | Beginning in            |                          |
|                         | microversion 2.37 this  |                          |
|                         | field is required and   |                          |
|                         | also supports a single  |                          |
|                         | string value of 'auto'  |                          |
|                         | or 'none'.  The 'auto'  |                          |
|                         | value means the Compute |                          |
|                         | service will            |                          |
|                         | automatically allocate  |                          |
|                         | a network for the       |                          |
|                         | project if one  is not  |                          |
|                         | available. This is the  |                          |
|                         | same behavior as not    |                          |
|                         | passing anything for    |                          |
|                         | nics before             |                          |
|                         | microversion 2.37. The  |                          |
|                         | 'none' value tells the  |                          |
|                         | Compute service to not  |                          |
|                         | allocate  any           |                          |
|                         | networking for the      |                          |
|                         | server."},              |                          |
|                         | {'name':                |                          |
|                         | 'scheduler_hints',      |                          |
|                         | 'desc':                 |                          |
|                         | 'scheduler_hints:       |                          |
|                         | (optional extension)    |                          |
|                         | arbitrary key-value     |                          |
|                         | pairs  specified by the |                          |
|                         | client to help boot an  |                          |
|                         | instance'},             |                          |
|                         | {'name':                |                          |
|                         | 'config_drive', 'desc': |                          |
|                         | 'config_drive:          |                          |
|                         | (optional extension)    |                          |
|                         | value for config drive  |                          |
|                         | either boolean, or      |                          |
|                         | volume-id'},            |                          |
|                         | {'name': 'disk_config', |                          |
|                         | 'desc': "disk_config:   |                          |
|                         | (optional extension)    |                          |
|                         | control how the disk is |                          |
|                         | partitioned when the    |                          |
|                         | server is created.      |                          |
|                         | possible  values are    |                          |
|                         | 'AUTO' or 'MANUAL'."},  |                          |
|                         | {'name': 'admin_pass',  |                          |
|                         | 'desc': 'admin_pass:    |                          |
|                         | (optional extension)    |                          |
|                         | add a user supplied     |                          |
|                         | admin  password.'},     |                          |
|                         | {'name':                |                          |
|                         | 'access_ip_v4', 'desc': |                          |
|                         | 'access_ip_v4:          |                          |
|                         | (optional extension)    |                          |
|                         | add alternative access  |                          |
|                         | ip v4'},                |                          |
|                         | {'name':                |                          |
|                         | 'access_ip_v6', 'desc': |                          |
|                         | 'access_ip_v6:          |                          |
|                         | (optional extension)    |                          |
|                         | add alternative access  |                          |
|                         | ip v6'}                 |                          |
|                         |                         |                          |
| servers.create_image    | {'name': 'server',      | Snapshot a server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'image_name',  |                          |
|                         | 'desc': 'image_name:    |                          |
|                         | Name to give the        |                          |
|                         | snapshot image'},       |                          |
|                         | {'name': 'metadata',    |                          |
|                         | 'desc': "metadata:      |                          |
|                         | Metadata to give newly- |                          |
|                         | created image entity    |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.StrW |                          |
|                         | ithMeta  (The snapshot  |                          |
|                         | image's UUID)"}         |                          |
|                         |                         |                          |
| servers.delete          | {'name': 'server',      | Delete (i.e. shut down   |
|                         | 'desc': 'server: The    | and delete the image)    |
|                         | :class:`Server` (or its | this server.             |
|                         | ID) to delete :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.delete_all_tags | {'name': 'obj', 'desc': | Remove all tags from an  |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.delete_meta     | {'name': 'server',      | Delete metadata from a   |
|                         | 'desc': 'server: The    | server                   |
|                         | :class:`Server` to add  |                          |
|                         | metadata to'},          |                          |
|                         | {'name': 'keys',        |                          |
|                         | 'desc': 'keys: A list   |                          |
|                         | of metadata keys to     |                          |
|                         | delete from the server  |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.delete_tag      | {'name': 'obj', 'desc': | Remove single tag from   |
|                         | 'None'}                 | an instance.             |
|                         |                         |                          |
| servers.diagnostics     | {'name': 'server',      | Retrieve server          |
|                         | 'desc': 'server: The    | diagnostics.             |
|                         | :class:`Server` (or its |                          |
|                         | ID) for which           |                          |
|                         | diagnostics to be       |                          |
|                         | returned :returns: An   |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| servers.evacuate        | {'name': 'obj', 'desc': | Evacuate a server        |
|                         | 'server: The            | instance.                |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'}    |                          |
|                         |                         |                          |
| servers.find            |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| servers.findall         |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| servers.force_delete    | {'name': 'server',      | Force delete the server. |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to force delete     |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.get             | {'name': 'server',      | Get a server.            |
|                         | 'desc': 'server: ID of  |                          |
|                         | the :class:`Server` to  |                          |
|                         | get. :rtype:            |                          |
|                         | :class:`Server`'}       |                          |
|                         |                         |                          |
| servers.get_console_out | {'name': 'server',      | Get text console log     |
| put                     | 'desc': 'server: The    | output from Server.      |
|                         | :class:`Server` (or its |                          |
|                         | ID) whose console       |                          |
|                         | output  you would like  |                          |
|                         | to retrieve.'},         |                          |
|                         | {'name': 'length',      |                          |
|                         | 'desc': 'length: The    |                          |
|                         | number of tail loglines |                          |
|                         | you would like to       |                          |
|                         | retrieve. :returns: An  |                          |
|                         | instance of novaclient. |                          |
|                         | base.StrWithMeta or  no |                          |
|                         | vaclient.base.UnicodeWi |                          |
|                         | thMeta'}                |                          |
|                         |                         |                          |
| servers.get_console_url | {'name': 'obj', 'desc': | Retrieve a console url   |
|                         | 'server: server to get  | of a server.             |
|                         | console url for'}       |                          |
|                         |                         |                          |
| servers.get_mks_console | {'name': 'obj', 'desc': | Get a mks console for an |
|                         | 'server: The            | instance                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console for. |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Dict |                          |
|                         | WithMeta'}              |                          |
|                         |                         |                          |
| servers.get_password    | {'name': 'server',      | Get admin password of an |
|                         | 'desc': 'server: The    | instance  Returns the    |
|                         | :class:`Server` (or its | admin password of an     |
|                         | ID) for which the admin | instance in the clear if |
|                         | password is to be       | private_key is provided, |
|                         | returned'},             | returns the ciphered     |
|                         | {'name': 'private_key', | password otherwise.      |
|                         | 'desc': 'private_key:   | Requires that openssl is |
|                         | The private key to      | installed and in the     |
|                         | decrypt password        | path                     |
|                         | (optional) :returns: An |                          |
|                         | instance of novaclient. |                          |
|                         | base.StrWithMeta or  no |                          |
|                         | vaclient.base.BytesWith |                          |
|                         | Meta or  novaclient.bas |                          |
|                         | e.UnicodeWithMeta'}     |                          |
|                         |                         |                          |
| servers.get_rdp_console | {'name': 'server',      | Get a rdp console for an |
|                         | 'desc': 'server: The    | instance                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | rdp console to get      |                          |
|                         | ('rdp-html5') :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.DictWithMeta"}  |                          |
|                         |                         |                          |
| servers.get_serial_cons | {'name': 'server',      | Get a serial console for |
| ole                     | 'desc': 'server: The    | an instance              |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | serial console to get   |                          |
|                         | ('serial') :returns: An |                          |
|                         | instance of novaclient. |                          |
|                         | base.DictWithMeta"}     |                          |
|                         |                         |                          |
| servers.get_spice_conso | {'name': 'server',      | Get a spice console for  |
| le                      | 'desc': 'server: The    | an instance              |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | spice console to get    |                          |
|                         | ('spice-html5')         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Dict |                          |
|                         | WithMeta"}              |                          |
|                         |                         |                          |
| servers.get_vnc_console | {'name': 'server',      | Get a vnc console for an |
|                         | 'desc': 'server: The    | instance                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | vnc console to get      |                          |
|                         | ('novnc' or 'xvpvnc')   |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Dict |                          |
|                         | WithMeta"}              |                          |
|                         |                         |                          |
| servers.interface_attac | {'name': 'obj', 'desc': | Attach a                 |
| h                       | 'server: The            | network_interface to an  |
|                         | :class:`Server` (or its | instance.                |
|                         | ID) to attach to.'}     |                          |
|                         |                         |                          |
| servers.interface_detac | {'name': 'server',      | Detach a                 |
| h                       | 'desc': 'server: The    | network_interface from   |
|                         | :class:`Server` (or its | an instance.             |
|                         | ID) to detach from.'},  |                          |
|                         | {'name': 'port_id',     |                          |
|                         | 'desc': 'port_id: The   |                          |
|                         | port to detach.         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.interface_list  | {'name': 'server',      | List attached network    |
|                         | 'desc': 'server: The    | interfaces               |
|                         | :class:`Server` (or its |                          |
|                         | ID) to query.'}         |                          |
|                         |                         |                          |
| servers.ips             | {'name': 'server',      | Return IP Addresses      |
|                         | 'desc': 'server: The    | associated with the      |
|                         | :class:`Server` (or its | server.  Often a cheaper |
|                         | ID) for which  the IP   | call then getting all    |
|                         | adresses are to be      | the details for a        |
|                         | returned :returns: An   | server.                  |
|                         | instance of novaclient. |                          |
|                         | base.DictWithMeta'}     |                          |
|                         |                         |                          |
| servers.list            | {'name': 'detailed',    | Get a list of servers.   |
|                         | 'desc': 'detailed:      |                          |
|                         | Whether to return       |                          |
|                         | detailed server info    |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'search_opts', |                          |
|                         | 'desc': "search_opts:   |                          |
|                         | Search options to       |                          |
|                         | filter out servers      |                          |
|                         | which don't  match the  |                          |
|                         | search_opts (optional). |                          |
|                         | The search opts format  |                          |
|                         | is a  dictionary of key |                          |
|                         | / value pairs that will |                          |
|                         | be appended to the      |                          |
|                         | query  string. For a    |                          |
|                         | complete list of keys   |                          |
|                         | see:  http://developer. |                          |
|                         | openstack.org/api-ref-c |                          |
|                         | ompute-v2.1.html#listSe |                          |
|                         | rvers"},                |                          |
|                         | {'name': 'marker',      |                          |
|                         | 'desc': 'marker: Begin  |                          |
|                         | returning servers that  |                          |
|                         | appear later in the     |                          |
|                         | server  list than that  |                          |
|                         | represented by this     |                          |
|                         | server id               |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'limit',       |                          |
|                         | 'desc': 'limit: Maximum |                          |
|                         | number of servers to    |                          |
|                         | return (optional).'},   |                          |
|                         | {'name': 'sort_keys',   |                          |
|                         | 'desc': 'sort_keys:     |                          |
|                         | List of sort keys'},    |                          |
|                         | {'name': 'sort_dirs',   |                          |
|                         | 'desc': "sort_dirs:     |                          |
|                         | List of sort directions |                          |
|                         | :rtype: list of         |                          |
|                         | :class:`Server`         |                          |
|                         | Examples:               |                          |
|                         | client.servers.list() - |                          |
|                         | returns detailed list   |                          |
|                         | of servers  client.serv |                          |
|                         | ers.list(search_opts={' |                          |
|                         | status': 'ERROR'}) -    |                          |
|                         | returns list of servers |                          |
|                         | in error state.  client |                          |
|                         | .servers.list(limit=10) |                          |
|                         | - returns only 10       |                          |
|                         | servers"}               |                          |
|                         |                         |                          |
| servers.list_security_g | {'name': 'server',      | List Security Group(s)   |
| roup                    | 'desc': 'server: ID of  | of an instance           |
|                         | the instance.'}         |                          |
|                         |                         |                          |
| servers.live_migrate    | {'name': 'obj', 'desc': | Migrates a running       |
|                         | 'server: instance id    | instance to a new        |
|                         | which comes from nova   | machine.                 |
|                         | list.'}                 |                          |
|                         |                         |                          |
| servers.lock            | {'name': 'server',      | Lock the server.         |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to lock :returns:   |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.migrate         | {'name': 'server',      | Migrate a server to a    |
|                         | 'desc': 'server: The    | new host.                |
|                         | :class:`Server` (or its |                          |
|                         | ID). :returns: An       |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| servers.pause           | {'name': 'server',      | Pause the server.        |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to pause :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.reboot          | {'name': 'server',      | Reboot a server.         |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'reboot_type', |                          |
|                         | 'desc': 'reboot_type:   |                          |
|                         | either                  |                          |
|                         | :data:`REBOOT_SOFT` for |                          |
|                         | a software-level        |                          |
|                         | reboot, or              |                          |
|                         | `REBOOT_HARD` for a     |                          |
|                         | virtual power cycle     |                          |
|                         | hard reboot. :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.rebuild         | {'name': 'server',      | Rebuild -- shut down and |
|                         | 'desc': 'server: The    | then re-image -- a       |
|                         | :class:`Server` (or its | server.                  |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'image',       |                          |
|                         | 'desc': 'image: the     |                          |
|                         | :class:`Image` (or its  |                          |
|                         | ID) to re-image         |                          |
|                         | with.'},                |                          |
|                         | {'name': 'password',    |                          |
|                         | 'desc': 'password:      |                          |
|                         | string to set as        |                          |
|                         | password on the rebuilt |                          |
|                         | server.'},              |                          |
|                         | {'name': 'disk_config', |                          |
|                         | 'desc': "disk_config:   |                          |
|                         | partitioning mode to    |                          |
|                         | use on the rebuilt      |                          |
|                         | server.  Valid values   |                          |
|                         | are 'AUTO' or           |                          |
|                         | 'MANUAL'"},             |                          |
|                         | {'name':                |                          |
|                         | 'preserve_ephemeral',   |                          |
|                         | 'desc':                 |                          |
|                         | 'preserve_ephemeral: If |                          |
|                         | True, request that any  |                          |
|                         | ephemeral device  be    |                          |
|                         | preserved when          |                          |
|                         | rebuilding the          |                          |
|                         | instance. Defaults to   |                          |
|                         | False.'},               |                          |
|                         | {'name': 'name',        |                          |
|                         | 'desc': 'name:          |                          |
|                         | Something to name the   |                          |
|                         | server.'},              |                          |
|                         | {'name': 'meta',        |                          |
|                         | 'desc': 'meta: A dict   |                          |
|                         | of arbitrary key/value  |                          |
|                         | metadata to store for   |                          |
|                         | this  server. Both keys |                          |
|                         | and values must be      |                          |
|                         | <=255 characters.'},    |                          |
|                         | {'name': 'files',       |                          |
|                         | 'desc': 'files: A dict  |                          |
|                         | of files to overwrite   |                          |
|                         | on the server upon      |                          |
|                         | boot.  Keys are file    |                          |
|                         | names (i.e.             |                          |
|                         | ``/etc/passwd``) and    |                          |
|                         | values  are the file    |                          |
|                         | contents (either as a   |                          |
|                         | string or as a  file-   |                          |
|                         | like object). A maximum |                          |
|                         | of five entries is      |                          |
|                         | allowed,  and each file |                          |
|                         | must be 10k or less.'}  |                          |
|                         |                         |                          |
| servers.remove_fixed_ip | {'name': 'obj', 'desc': | DEPRECATED Remove an IP  |
|                         | 'server: The            | address.                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to add an IP to.'}  |                          |
|                         |                         |                          |
| servers.remove_floating | {'name': 'obj', 'desc': | DEPRECATED Remove a      |
| _ip                     | 'server: The            | floating IP address.     |
|                         | :class:`Server` (or its |                          |
|                         | ID) to remove an IP     |                          |
|                         | from.'}                 |                          |
|                         |                         |                          |
| servers.remove_security | {'name': 'server',      | Remove a Security Group  |
| _group                  | 'desc': 'server: ID of  | to an instance           |
|                         | the instance.'},        |                          |
|                         | {'name':                |                          |
|                         | 'security_group',       |                          |
|                         | 'desc':                 |                          |
|                         | 'security_group: The    |                          |
|                         | name of security group  |                          |
|                         | to remove. :returns: An |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| servers.rescue          | {'name': 'server',      | Rescue the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` to      |                          |
|                         | rescue.'},              |                          |
|                         | {'name': 'password',    |                          |
|                         | 'desc': 'password: The  |                          |
|                         | admin password to be    |                          |
|                         | set in the rescue       |                          |
|                         | instance.'},            |                          |
|                         | {'name': 'image',       |                          |
|                         | 'desc': 'image: The     |                          |
|                         | :class:`Image` to       |                          |
|                         | rescue with. :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.reset_network   | {'name': 'server',      | Reset network of an      |
|                         | 'desc': 'server: The    | instance.                |
|                         | :class:`Server` for     |                          |
|                         | network is to be reset  |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.reset_state     | {'name': 'server',      | Reset the state of an    |
|                         | 'desc': 'server: ID of  | instance to active or    |
|                         | the instance to reset   | error.                   |
|                         | the state of.'},        |                          |
|                         | {'name': 'state',       |                          |
|                         | 'desc': "state: Desired |                          |
|                         | state; either 'active'  |                          |
|                         | or 'error'.  Defaults   |                          |
|                         | to 'error'. :returns:   |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta"} |                          |
|                         |                         |                          |
| servers.resize          | {'name': 'server',      | Resize a server's        |
|                         | 'desc': 'server: The    | resources.               |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'flavor',      |                          |
|                         | 'desc': 'flavor: the    |                          |
|                         | :class:`Flavor` (or its |                          |
|                         | ID) to resize to.'},    |                          |
|                         | {'name': 'disk_config', |                          |
|                         | 'desc': "disk_config:   |                          |
|                         | partitioning mode to    |                          |
|                         | use on the rebuilt      |                          |
|                         | server.  Valid values   |                          |
|                         | are 'AUTO' or 'MANUAL'  |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta  Until a      |                          |
|                         | resize event is         |                          |
|                         | confirmed with          |                          |
|                         | :meth:`confirm_resize`, |                          |
|                         | the old server will be  |                          |
|                         | kept around and you'll  |                          |
|                         | be able to roll back to |                          |
|                         | the old flavor quickly  |                          |
|                         | with                    |                          |
|                         | :meth:`revert_resize`.  |                          |
|                         | All resizes are         |                          |
|                         | automatically confirmed |                          |
|                         | after 24 hours."}       |                          |
|                         |                         |                          |
| servers.restore         | {'name': 'server',      | Restore soft-deleted     |
|                         | 'desc': 'server: The    | server.                  |
|                         | :class:`Server` (or its |                          |
|                         | ID) to restore          |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.resume          | {'name': 'server',      | Resume the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to resume :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.revert_resize   | {'name': 'server',      | Revert a previous        |
|                         | 'desc': 'server: The    | resize, switching back   |
|                         | :class:`Server` (or its | to the old server.       |
|                         | ID) to share onto.      |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.run_hooks       | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| servers.set_meta        | {'name': 'server',      | Set a server's metadata  |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` to add  |                          |
|                         | metadata to'},          |                          |
|                         | {'name': 'metadata',    |                          |
|                         | 'desc': 'metadata: A    |                          |
|                         | dict of metadata to be  |                          |
|                         | added to the server'}   |                          |
|                         |                         |                          |
| servers.set_meta_item   | {'name': 'server',      | Updates an item of       |
|                         | 'desc': 'server: The    | server metadata          |
|                         | :class:`Server` to add  |                          |
|                         | metadata to'},          |                          |
|                         | {'name': 'key', 'desc': |                          |
|                         | 'key: metadata key to   |                          |
|                         | update'},               |                          |
|                         | {'name': 'value',       |                          |
|                         | 'desc': 'value: string  |                          |
|                         | value'}                 |                          |
|                         |                         |                          |
| servers.set_tags        | {'name': 'obj', 'desc': | Set list of tags to an   |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.shelve          | {'name': 'server',      | Shelve the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to shelve :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.shelve_offload  | {'name': 'server',      | Remove a shelved         |
|                         | 'desc': 'server: The    | instance from the        |
|                         | :class:`Server` (or its | compute node.            |
|                         | ID) to shelve offload   |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.start           | {'name': 'server',      | Start the server.        |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to start :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.stop            | {'name': 'server',      | Stop the server.         |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to stop :returns:   |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.suspend         | {'name': 'server',      | Suspend the server.      |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to suspend          |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.tag_list        | {'name': 'obj', 'desc': | Get list of tags from an |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.trigger_crash_d | {'name': 'obj', 'desc': | Trigger crash dump in an |
| ump                     | 'None'}                 | instance                 |
|                         |                         |                          |
| servers.unlock          | {'name': 'server',      | Unlock the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unlock :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.unpause         | {'name': 'server',      | Unpause the server.      |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unpause          |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.unrescue        | {'name': 'server',      | Unrescue the server.     |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unrescue         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.unshelve        | {'name': 'server',      | Unshelve the server.     |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unshelve         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.update          | {'name': 'obj', 'desc': | Update the name or the   |
|                         | 'server: The            | description for a        |
|                         | :class:`Server` (or its | server.                  |
|                         | ID) to update.'}        |                          |
|                         |                         |                          |
| servers.write_to_comple |                         |                          |
| tion_cache              |                         |                          |
| servers_set_meta        | {'name': 'server',      | A wrapper for            |
|                         | 'description': 'server  | servers.set_meta()       |
|                         | id'},                   |                          |
|                         | {'name': 'meta-key1',   |                          |
|                         | 'description': 'meta    |                          |
|                         | key 1'},                |                          |
|                         | {'name': 'meta-value1', |                          |
|                         | 'description': 'value   |                          |
|                         | for meta key1'},        |                          |
|                         | {'name': 'meta-keyN',   |                          |
|                         | 'description': 'meta    |                          |
|                         | key N'},                |                          |
|                         | {'name': 'meta-valueN', |                          |
|                         | 'description': 'value   |                          |
|                         | for meta keyN'}         |                          |
|                         |                         |                          |
| services.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| services.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| services.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| services.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| services.delete         | {'name': 'service_id',  | Delete a service.        |
|                         | 'desc': 'service_id:    |                          |
|                         | Before microversion     |                          |
|                         | 2.53, this must be an   |                          |
|                         | integer id  and may not |                          |
|                         | uniquely the service in |                          |
|                         | a multi-cell            |                          |
|                         | deployment.  Starting   |                          |
|                         | with microversion 2.53  |                          |
|                         | this must be a UUID.'}  |                          |
|                         |                         |                          |
| services.disable        | {'name': 'obj', 'desc': | Disable the service      |
|                         | 'service_uuid: The UUID | specified by the service |
|                         | ID of the service to    | UUID ID.                 |
|                         | disable.'}              |                          |
|                         |                         |                          |
| services.disable_log_re | {'name': 'obj', 'desc': | Disable the service with |
| ason                    | 'service_uuid: The UUID | a reason.                |
|                         | ID of the service to    |                          |
|                         | disable.'}              |                          |
|                         |                         |                          |
| services.enable         | {'name': 'obj', 'desc': | Enable the service       |
|                         | 'service_uuid: The UUID | specified by the service |
|                         | ID of the service to    | UUID ID.                 |
|                         | enable.'}               |                          |
|                         |                         |                          |
| services.find           |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| services.findall        |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| services.force_down     | {'name': 'obj', 'desc': | Update the service's     |
|                         | 'service_uuid: The UUID | ``forced_down`` field    |
|                         | ID of the service.'}    | specified by the service |
|                         |                         | UUID ID.                 |
| services.list           | {'name': 'host',        | Get a list of services.  |
|                         | 'desc': 'host:          |                          |
|                         | destination host        |                          |
|                         | name.'},                |                          |
|                         | {'name': 'binary',      |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| services.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| services.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| usage.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| usage.alternate_service |                         |                          |
| _type                   |                         |                          |
| usage.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| usage.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| usage.find              |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| usage.findall           |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| usage.get               | {'name': 'obj', 'desc': | Get usage for a specific |
|                         | 'tenant_id: Tenant ID   | tenant.                  |
|                         | to fetch usage for'}    |                          |
|                         |                         |                          |
| usage.list              | {'name': 'obj', 'desc': | Get usage for all        |
|                         | 'start: :class:`datetim | tenants                  |
|                         | e.datetime` Start date  |                          |
|                         | in UTC'}                |                          |
|                         |                         |                          |
| usage.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| usage.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| versions.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| versions.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| versions.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| versions.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| versions.find           |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| versions.findall        |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| versions.get_current    |                         |                          |
|                         |                         |                          |
| versions.list           |                         | List all versions.       |
|                         |                         |                          |
| versions.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| versions.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| virtual_interfaces.add_ | {'name': 'cls', 'desc': | Add a new hook of        |
| hook                    | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| virtual_interfaces.alte |                         |                          |
| rnate_service_type      |                         |                          |
| virtual_interfaces.comp |                         | The completion cache for |
| letion_cache            |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| virtual_interfaces.conv |                         |                          |
| ert_into_with_meta      |                         |                          |
| virtual_interfaces.find |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| virtual_interfaces.find |                         | Find all items with      |
| all                     |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| virtual_interfaces.list | {'name': 'obj', 'desc': | DEPRECATED               |
|                         | 'None'}                 |                          |
|                         |                         |                          |
| virtual_interfaces.run_ | {'name': 'cls', 'desc': | Run all hooks of         |
| hooks                   | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| virtual_interfaces.writ |                         |                          |
| e_to_completion_cache   |                         |                          |
| volumes.add_hook        | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| volumes.alternate_servi |                         |                          |
| ce_type                 |                         |                          |
| volumes.completion_cach |                         | The completion cache for |
| e                       |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| volumes.convert_into_wi |                         |                          |
| th_meta                 |                         |                          |
| volumes.create_server_v | {'name': 'obj', 'desc': | Attach a volume          |
| olume                   | 'server_id: The ID of   | identified by the volume |
|                         | the server'}            | ID to the given server   |
|                         |                         | ID                       |
| volumes.delete_server_v | {'name': 'server_id',   | Detach a volume          |
| olume                   | 'desc': 'server_id: The | identified by the volume |
|                         | ID of the server'},     | ID from the given server |
|                         | {'name': 'volume_id',   |                          |
|                         | 'desc': 'volume_id: The |                          |
|                         | ID of the volume to     |                          |
|                         | attach :returns: An     |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'},   |                          |
|                         | {'name':                |                          |
|                         | 'attachment_id',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| volumes.get_server_volu | {'name': 'server_id',   | Get the volume           |
| me                      | 'desc': 'server_id: The | identified by the volume |
|                         | ID of the server'},     | ID, that is attached to  |
|                         | {'name': 'volume_id',   | the given server ID      |
|                         | 'desc': 'volume_id: The |                          |
|                         | ID of the volume to     |                          |
|                         | attach :rtype:          |                          |
|                         | :class:`Volume`'},      |                          |
|                         | {'name':                |                          |
|                         | 'attachment_id',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| volumes.get_server_volu | {'name': 'server_id',   | Get a list of all the    |
| mes                     | 'desc': 'server_id: The | attached volumes for the |
|                         | ID of the server        | given server ID          |
|                         | :rtype: list of         |                          |
|                         | :class:`Volume`'}       |                          |
|                         |                         |                          |
| volumes.run_hooks       | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| volumes.update_server_v | {'name': 'server_id',   | Swaps the existing       |
| olume                   | 'desc': 'server_id: The | volume attachment to     |
|                         | ID of the server'},     | point to a new volume.   |
|                         | {'name': 'src_volid',   | Takes a server, a source |
|                         | 'desc': 'source_volume: | (attached) volume and a  |
|                         | The ID of the src       | destination volume and   |
|                         | volume'},               | performs a hypervisor    |
|                         | {'name': 'dest_volid',  | assisted data migration  |
|                         | 'desc': 'dest_volume:   | from src to dest volume, |
|                         | The ID of the           | detaches the original    |
|                         | destination volume      | (source) volume and      |
|                         | :rtype:                 | attaches the new         |
|                         | :class:`Volume`'}       | destination volume. Note |
|                         |                         | that not all backing     |
|                         |                         | hypervisor drivers       |
|                         |                         | support this operation   |
|                         |                         | and it may be disabled   |
|                         |                         | via policy.              |
| volumes.write_to_comple |                         |                          |
| tion_cache              |                         |                          |
+-------------------------+-------------------------+--------------------------+
+./scripts/manual_testing/general.sh:main:17  openstack congress datasource actions show 3bf88455-8b22-4327-81d2-0189aea0325c
+-------------------------+-------------------------+--------------------------+
| action                  | args                    | description              |
+-------------------------+-------------------------+--------------------------+
| agents.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| agents.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| agents.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| agents.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| agents.create           | {'name': 'os', 'desc':  | Create a new agent       |
|                         | 'None'},                | build.                   |
|                         | {'name':                |                          |
|                         | 'architecture', 'desc': |                          |
|                         | 'None'},                |                          |
|                         | {'name': 'version',     |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'url', 'desc': |                          |
|                         | 'None'},                |                          |
|                         | {'name': 'md5hash',     |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'hypervisor',  |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| agents.delete           | {'name': 'id', 'desc':  | Deletes an existing      |
|                         | "id: The agent's id to  | agent build.             |
|                         | delete :returns: An     |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta"}    |                          |
|                         |                         |                          |
| agents.find             |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| agents.findall          |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| agents.list             | {'name': 'hypervisor',  | List all agent builds.   |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| agents.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| agents.update           | {'name': 'id', 'desc':  | Update an existing agent |
|                         | 'None'},                | build.                   |
|                         | {'name': 'version',     |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'url', 'desc': |                          |
|                         | 'None'},                |                          |
|                         | {'name': 'md5hash',     |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| agents.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| aggregates.add_hook     | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| aggregates.add_host     | {'name': 'aggregate',   | Add a host into the Host |
|                         | 'desc': 'None'},        | Aggregate.               |
|                         | {'name': 'host',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.alternate_se |                         |                          |
| rvice_type              |                         |                          |
| aggregates.completion_c |                         | The completion cache for |
| ache                    |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| aggregates.convert_into |                         |                          |
| _with_meta              |                         |                          |
| aggregates.create       | {'name': 'name',        | Create a new aggregate.  |
|                         | 'desc': 'None'},        |                          |
|                         | {'name':                |                          |
|                         | 'availability_zone',    |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.delete       | {'name': 'aggregate',   | Delete the specified     |
|                         | 'desc': 'aggregate: The | aggregate.               |
|                         | aggregate to delete     |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| aggregates.find         |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| aggregates.findall      |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| aggregates.get          | {'name': 'aggregate',   | Get details of the       |
|                         | 'desc': 'None'}         | specified aggregate.     |
|                         |                         |                          |
| aggregates.get_details  | {'name': 'aggregate',   | Get details of the       |
|                         | 'desc': 'None'}         | specified aggregate.     |
|                         |                         |                          |
| aggregates.list         |                         | Get a list of os-        |
|                         |                         | aggregates.              |
| aggregates.remove_host  | {'name': 'aggregate',   | Remove a host from the   |
|                         | 'desc': 'None'},        | Host Aggregate.          |
|                         | {'name': 'host',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.run_hooks    | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| aggregates.set_metadata | {'name': 'aggregate',   | Set aggregate metadata,  |
|                         | 'desc': 'None'},        | replacing the existing   |
|                         | {'name': 'metadata',    | metadata.                |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.update       | {'name': 'aggregate',   | Update the name and/or   |
|                         | 'desc': 'None'},        | availability zone.       |
|                         | {'name': 'values',      |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| aggregates.write_to_com |                         |                          |
| pletion_cache           |                         |                          |
| assisted_volume_snapsho | {'name': 'cls', 'desc': | Add a new hook of        |
| ts.add_hook             | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| assisted_volume_snapsho |                         |                          |
| ts.alternate_service_ty |                         |                          |
| pe                      |                         |                          |
| assisted_volume_snapsho |                         | The completion cache for |
| ts.completion_cache     |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| assisted_volume_snapsho |                         |                          |
| ts.convert_into_with_me |                         |                          |
| ta                      |                         |                          |
| assisted_volume_snapsho |                         |                          |
| ts.create               |                         |                          |
| assisted_volume_snapsho | {'name': 'snapshot',    | Delete a specified       |
| ts.delete               | 'desc': 'snapshot: an   | assisted volume          |
|                         | assisted volume         | snapshot.                |
|                         | snapshot to delete'},   |                          |
|                         | {'name': 'delete_info', |                          |
|                         | 'desc': 'delete_info:   |                          |
|                         | Information for         |                          |
|                         | snapshot deletion       |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| assisted_volume_snapsho | {'name': 'cls', 'desc': | Run all hooks of         |
| ts.run_hooks            | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| assisted_volume_snapsho |                         |                          |
| ts.write_to_completion_ |                         |                          |
| cache                   |                         |                          |
| availability_zones.add_ | {'name': 'cls', 'desc': | Add a new hook of        |
| hook                    | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| availability_zones.alte |                         |                          |
| rnate_service_type      |                         |                          |
| availability_zones.comp |                         | The completion cache for |
| letion_cache            |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| availability_zones.conv |                         |                          |
| ert_into_with_meta      |                         |                          |
| availability_zones.find |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| availability_zones.find |                         | Find all items with      |
| all                     |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| availability_zones.list | {'name': 'detailed',    | Get a list of all        |
|                         | 'desc': 'detailed: If   | availability zones.      |
|                         | True, list availability |                          |
|                         | zones with details.     |                          |
|                         | :returns: list of :clas |                          |
|                         | s:`AvailabilityZone`'}  |                          |
|                         |                         |                          |
| availability_zones.run_ | {'name': 'cls', 'desc': | Run all hooks of         |
| hooks                   | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| availability_zones.writ |                         |                          |
| e_to_completion_cache   |                         |                          |
| cells.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| cells.alternate_service |                         |                          |
| _type                   |                         |                          |
| cells.capacities        | {'name': 'cell_name',   | Get capacities for a     |
|                         | 'desc': 'cell_name:     | cell.                    |
|                         | Name of the             |                          |
|                         | :class:`Cell` to get    |                          |
|                         | capacities for. :rtype: |                          |
|                         | :class:`Cell`'}         |                          |
|                         |                         |                          |
| cells.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| cells.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| cells.get               | {'name': 'cell_name',   | Get a cell.              |
|                         | 'desc': 'cell_name:     |                          |
|                         | Name of the             |                          |
|                         | :class:`Cell` to get.   |                          |
|                         | :rtype: :class:`Cell`'} |                          |
|                         |                         |                          |
| cells.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| cells.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| certs.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| certs.alternate_service |                         |                          |
| _type                   |                         |                          |
| certs.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| certs.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| certs.create            |                         | DEPRECATED Create a x509 |
|                         |                         | certificate for a user   |
|                         |                         | in tenant.               |
| certs.get               |                         | DEPRECATED Get root      |
|                         |                         | certificate.             |
| certs.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| certs.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| client.authenticate     |                         | Authenticate against the |
|                         |                         | server.  Normally this   |
|                         |                         | is called automatically  |
|                         |                         | when you first access    |
|                         |                         | the API, but you can     |
|                         |                         | call this method to      |
|                         |                         | force authentication     |
|                         |                         | right now.  Returns on   |
|                         |                         | success; raises :exc:`ex |
|                         |                         | ceptions.Unauthorized`   |
|                         |                         | if the credentials are   |
|                         |                         | wrong.                   |
| client.get_timings      |                         |                          |
|                         |                         |                          |
| client.reset_timings    |                         |                          |
|                         |                         |                          |
| client.set_management_u |                         |                          |
| rl                      |                         |                          |
| cloudpipe.add_hook      | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| cloudpipe.alternate_ser |                         |                          |
| vice_type               |                         |                          |
| cloudpipe.completion_ca |                         | The completion cache for |
| che                     |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| cloudpipe.convert_into_ |                         |                          |
| with_meta               |                         |                          |
| cloudpipe.create        | {'name': 'project',     | DEPRECATED Launch a      |
|                         | 'desc': 'project: UUID  | cloudpipe instance.      |
|                         | of the project (tenant) |                          |
|                         | for the cloudpipe'}     |                          |
|                         |                         |                          |
| cloudpipe.find          |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| cloudpipe.findall       |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| cloudpipe.list          |                         | DEPRECATED Get a list of |
|                         |                         | cloudpipe instances.     |
| cloudpipe.run_hooks     | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| cloudpipe.update        | {'name': 'address',     | DEPRECATED Configure     |
|                         | 'desc': 'address: IP    | cloudpipe parameters for |
|                         | address'},              | the project.  Update VPN |
|                         | {'name': 'port',        | address and port for all |
|                         | 'desc': 'port: Port     | networks associated with |
|                         | number :returns: An     | the project defined by   |
|                         | instance of novaclient. | authentication           |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| cloudpipe.write_to_comp |                         |                          |
| letion_cache            |                         |                          |
| flavor_access.add_hook  | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| flavor_access.add_tenan | {'name': 'flavor',      | Add a tenant to the      |
| t_access                | 'desc': 'None'},        | given flavor access      |
|                         | {'name': 'tenant',      | list.                    |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| flavor_access.alternate |                         |                          |
| _service_type           |                         |                          |
| flavor_access.completio |                         | The completion cache for |
| n_cache                 |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| flavor_access.convert_i |                         |                          |
| nto_with_meta           |                         |                          |
| flavor_access.find      |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavor_access.findall   |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavor_access.list      |                         |                          |
|                         |                         |                          |
| flavor_access.remove_te | {'name': 'flavor',      | Remove a tenant from the |
| nant_access             | 'desc': 'None'},        | given flavor access      |
|                         | {'name': 'tenant',      | list.                    |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| flavor_access.run_hooks | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| flavor_access.write_to_ |                         |                          |
| completion_cache        |                         |                          |
| flavors.add_hook        | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| flavors.alternate_servi |                         |                          |
| ce_type                 |                         |                          |
| flavors.completion_cach |                         | The completion cache for |
| e                       |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| flavors.convert_into_wi |                         |                          |
| th_meta                 |                         |                          |
| flavors.create          | {'name': 'name',        | Create a flavor.         |
|                         | 'desc': 'name:          |                          |
|                         | Descriptive name of the |                          |
|                         | flavor'},               |                          |
|                         | {'name': 'ram', 'desc': |                          |
|                         | 'ram: Memory in MB for  |                          |
|                         | the flavor'},           |                          |
|                         | {'name': 'vcpus',       |                          |
|                         | 'desc': 'vcpus: Number  |                          |
|                         | of VCPUs for the        |                          |
|                         | flavor'},               |                          |
|                         | {'name': 'disk',        |                          |
|                         | 'desc': 'disk: Size of  |                          |
|                         | local disk in GB'},     |                          |
|                         | {'name': 'flavorid',    |                          |
|                         | 'desc': 'flavorid: ID   |                          |
|                         | for the flavor          |                          |
|                         | (optional). You can use |                          |
|                         | the reserved  value     |                          |
|                         | ``"auto"`` to have Nova |                          |
|                         | generate a UUID for the |                          |
|                         | flavor in cases where   |                          |
|                         | you cannot simply pass  |                          |
|                         | ``None``.'},            |                          |
|                         | {'name': 'ephemeral',   |                          |
|                         | 'desc': 'swap: Swap     |                          |
|                         | space in MB'},          |                          |
|                         | {'name': 'swap',        |                          |
|                         | 'desc': 'rxtx_factor:   |                          |
|                         | RX/TX factor :returns:  |                          |
|                         | :class:`Flavor`'},      |                          |
|                         | {'name': 'rxtx_factor', |                          |
|                         | 'desc': 'None'},        |                          |
|                         | {'name': 'is_public',   |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| flavors.delete          | {'name': 'flavor',      | Delete a specific        |
|                         | 'desc': 'flavor: The ID | flavor.                  |
|                         | of the :class:`Flavor`  |                          |
|                         | to get. :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| flavors.find            |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavors.findall         |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| flavors.get             | {'name': 'flavor',      | Get a specific flavor.   |
|                         | 'desc': 'flavor: The ID |                          |
|                         | of the :class:`Flavor`  |                          |
|                         | to get. :returns:       |                          |
|                         | :class:`Flavor`'}       |                          |
|                         |                         |                          |
| flavors.list            | {'name': 'detailed',    | Get a list of all        |
|                         | 'desc': 'detailed:      | flavors.                 |
|                         | Whether flavor needs to |                          |
|                         | be return with details  |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'is_public',   |                          |
|                         | 'desc': 'is_public:     |                          |
|                         | Filter flavors with     |                          |
|                         | provided access type    |                          |
|                         | (optional).  None means |                          |
|                         | give all flavors and    |                          |
|                         | only admin has query    |                          |
|                         | access to all flavor    |                          |
|                         | types.'},               |                          |
|                         | {'name': 'marker',      |                          |
|                         | 'desc': 'marker: Begin  |                          |
|                         | returning flavors that  |                          |
|                         | appear later in the     |                          |
|                         | flavor  list than that  |                          |
|                         | represented by this     |                          |
|                         | flavor id               |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'min_disk',    |                          |
|                         | 'desc': 'min_disk:      |                          |
|                         | Filters the flavors by  |                          |
|                         | a minimum disk space,   |                          |
|                         | in GiB.'},              |                          |
|                         | {'name': 'min_ram',     |                          |
|                         | 'desc': 'min_ram:       |                          |
|                         | Filters the flavors by  |                          |
|                         | a minimum RAM, in       |                          |
|                         | MB.'},                  |                          |
|                         | {'name': 'limit',       |                          |
|                         | 'desc': 'limit: maximum |                          |
|                         | number of flavors to    |                          |
|                         | return (optional).'},   |                          |
|                         | {'name': 'sort_key',    |                          |
|                         | 'desc': 'sort_key:      |                          |
|                         | Flavors list sort key   |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'sort_dir',    |                          |
|                         | 'desc': 'sort_dir:      |                          |
|                         | Flavors list sort       |                          |
|                         | direction (optional).   |                          |
|                         | :returns: list of       |                          |
|                         | :class:`Flavor`.'}      |                          |
|                         |                         |                          |
| flavors.run_hooks       | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| flavors.write_to_comple |                         |                          |
| tion_cache              |                         |                          |
| hosts.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| hosts.alternate_service |                         |                          |
| _type                   |                         |                          |
| hosts.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| hosts.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| hosts.find              |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hosts.findall           |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hosts.get               | {'name': 'obj', 'desc': | DEPRECATED Describes     |
|                         | 'host: destination host | cpu/memory/hdd info for  |
|                         | name.'}                 | host.                    |
|                         |                         |                          |
| hosts.host_action       | {'name': 'obj', 'desc': | DEPRECATED Perform an    |
|                         | 'host: The host to      | action on a host.        |
|                         | perform an action'}     |                          |
|                         |                         |                          |
| hosts.list              |                         |                          |
|                         |                         |                          |
| hosts.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| hosts.update            | {'name': 'obj', 'desc': | DEPRECATED Update status |
|                         | 'None'}                 | or maintenance mode for  |
|                         |                         | the host.                |
| hosts.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| hypervisors.add_hook    | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| hypervisors.alternate_s |                         |                          |
| ervice_type             |                         |                          |
| hypervisors.completion_ |                         | The completion cache for |
| cache                   |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| hypervisors.convert_int |                         |                          |
| o_with_meta             |                         |                          |
| hypervisors.find        |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hypervisors.findall     |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| hypervisors.get         | {'name': 'hypervisor',  | Get a specific           |
|                         | 'desc': 'hypervisor:    | hypervisor.              |
|                         | Either a Hypervisor     |                          |
|                         | object or an ID.        |                          |
|                         | Starting with           |                          |
|                         | microversion 2.53 the   |                          |
|                         | ID must be a UUID       |                          |
|                         | value.'}                |                          |
|                         |                         |                          |
| hypervisors.list        | {'name': 'obj', 'desc': | Get a list of            |
|                         | 'detailed: Include a    | hypervisors.             |
|                         | detailed response.'}    |                          |
|                         |                         |                          |
| hypervisors.run_hooks   | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| hypervisors.search      | {'name':                | Get a list of matching   |
|                         | 'hypervisor_match',     | hypervisors.             |
|                         | 'desc':                 |                          |
|                         | 'hypervisor_match: The  |                          |
|                         | hypervisor host name or |                          |
|                         | a portion of it.  The   |                          |
|                         | hypervisor hosts are    |                          |
|                         | selected with the host  |                          |
|                         | name matching  this     |                          |
|                         | pattern.'},             |                          |
|                         | {'name': 'servers',     |                          |
|                         | 'desc': 'servers: If    |                          |
|                         | True, server            |                          |
|                         | information is also     |                          |
|                         | retrieved.'}            |                          |
|                         |                         |                          |
| hypervisors.statistics  |                         | Get hypervisor           |
|                         |                         | statistics over all      |
|                         |                         | compute nodes.  Kept for |
|                         |                         | backwards compatibility, |
|                         |                         | new code should call hyp |
|                         |                         | ervisor_stats.statistics |
|                         |                         | () instead of            |
|                         |                         | hypervisors.statistics() |
| hypervisors.uptime      | {'name': 'hypervisor',  | Get the uptime for a     |
|                         | 'desc': 'hypervisor:    | specific hypervisor.     |
|                         | Either a Hypervisor     |                          |
|                         | object or an ID.        |                          |
|                         | Starting with           |                          |
|                         | microversion 2.53 the   |                          |
|                         | ID must be a UUID       |                          |
|                         | value.'}                |                          |
|                         |                         |                          |
| hypervisors.write_to_co |                         |                          |
| mpletion_cache          |                         |                          |
| images.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| images.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| images.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| images.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| images.find_image       | {'name': 'name_or_id',  | Find an image by name or |
|                         | 'desc': 'None'}         | id (user provided        |
|                         |                         | input).                  |
| images.list             |                         | Get a detailed list of   |
|                         |                         | all images.  :rtype:     |
|                         |                         | list of :class:`Image`   |
| images.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| images.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| instance_action.add_hoo | {'name': 'cls', 'desc': | Add a new hook of        |
| k                       | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| instance_action.alterna |                         |                          |
| te_service_type         |                         |                          |
| instance_action.complet |                         | The completion cache for |
| ion_cache               |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| instance_action.convert |                         |                          |
| _into_with_meta         |                         |                          |
| instance_action.find    |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| instance_action.findall |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| instance_action.get     | {'name': 'server',      | Get details of an action |
|                         | 'desc': 'request_id:    | performed on an          |
|                         | The request_id of the   | instance.                |
|                         | action to get.'},       |                          |
|                         | {'name': 'request_id',  |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| instance_action.list    | {'name': 'server',      | Get a list of actions    |
|                         | 'desc': 'None'}         | performed on a server.   |
|                         |                         |                          |
| instance_action.run_hoo | {'name': 'cls', 'desc': | Run all hooks of         |
| ks                      | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| instance_action.write_t |                         |                          |
| o_completion_cache      |                         |                          |
| keypairs.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| keypairs.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| keypairs.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| keypairs.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| keypairs.create         | {'name': 'obj', 'desc': | Create a keypair         |
|                         | 'name: name for the     |                          |
|                         | keypair to create'}     |                          |
|                         |                         |                          |
| keypairs.delete         | {'name': 'obj', 'desc': | Delete a keypair         |
|                         | 'key: The               |                          |
|                         | :class:`Keypair` (or    |                          |
|                         | its ID) to delete.'}    |                          |
|                         |                         |                          |
| keypairs.find           |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| keypairs.findall        |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| keypairs.get            | {'name': 'obj', 'desc': | Get a keypair.           |
|                         | 'keypair: The ID of the |                          |
|                         | keypair to get.'}       |                          |
|                         |                         |                          |
| keypairs.list           | {'name': 'obj', 'desc': | Get a list of keypairs.  |
|                         | 'user_id: Id of key-    |                          |
|                         | pairs owner (Admin      |                          |
|                         | only).'}                |                          |
|                         |                         |                          |
| keypairs.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| keypairs.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| limits.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| limits.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| limits.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| limits.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| limits.get              | {'name': 'reserved',    | Get a specific           |
|                         | 'desc': 'None'},        | extension.  :rtype:      |
|                         | {'name': 'tenant_id',   | :class:`Limits`          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| limits.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| limits.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| list_extensions.add_hoo | {'name': 'cls', 'desc': | Add a new hook of        |
| k                       | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| list_extensions.alterna |                         |                          |
| te_service_type         |                         |                          |
| list_extensions.complet |                         | The completion cache for |
| ion_cache               |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| list_extensions.convert |                         |                          |
| _into_with_meta         |                         |                          |
| list_extensions.run_hoo | {'name': 'cls', 'desc': | Run all hooks of         |
| ks                      | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| list_extensions.show_al |                         |                          |
| l                       |                         |                          |
| list_extensions.write_t |                         |                          |
| o_completion_cache      |                         |                          |
| migrations.add_hook     | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| migrations.alternate_se |                         |                          |
| rvice_type              |                         |                          |
| migrations.completion_c |                         | The completion cache for |
| ache                    |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| migrations.convert_into |                         |                          |
| _with_meta              |                         |                          |
| migrations.find         |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| migrations.findall      |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| migrations.list         | {'name': 'host',        | Get a list of            |
|                         | 'desc': 'host:          | migrations.              |
|                         | (optional) filter       |                          |
|                         | migrations by host      |                          |
|                         | name.'},                |                          |
|                         | {'name': 'status',      |                          |
|                         | 'desc': 'status:        |                          |
|                         | (optional) filter       |                          |
|                         | migrations by           |                          |
|                         | status.'},              |                          |
|                         | {'name': 'cell_name',   |                          |
|                         | 'desc': 'cell_name:     |                          |
|                         | (optional) filter       |                          |
|                         | migrations for a        |                          |
|                         | cell.'},                |                          |
|                         | {'name':                |                          |
|                         | 'instance_uuid',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| migrations.run_hooks    | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| migrations.write_to_com |                         |                          |
| pletion_cache           |                         |                          |
| networks.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| networks.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| networks.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| networks.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| networks.find_network   | {'name': 'name',        | Find a network by name   |
|                         | 'desc': 'None'}         | (user provided input).   |
|                         |                         |                          |
| networks.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| networks.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| quota_classes.add_hook  | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| quota_classes.alternate |                         |                          |
| _service_type           |                         |                          |
| quota_classes.completio |                         | The completion cache for |
| n_cache                 |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| quota_classes.convert_i |                         |                          |
| nto_with_meta           |                         |                          |
| quota_classes.get       |                         |                          |
|                         |                         |                          |
| quota_classes.run_hooks | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| quota_classes.update    |                         |                          |
|                         |                         |                          |
| quota_classes.write_to_ |                         |                          |
| completion_cache        |                         |                          |
| quotas.add_hook         | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| quotas.alternate_servic |                         |                          |
| e_type                  |                         |                          |
| quotas.completion_cache |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| quotas.convert_into_wit |                         |                          |
| h_meta                  |                         |                          |
| quotas.defaults         |                         |                          |
|                         |                         |                          |
| quotas.delete           | {'name': 'tenant_id',   | Delete quota for a       |
|                         | 'desc': 'tenant_id: A   | tenant or for a user.    |
|                         | tenant for which quota  |                          |
|                         | is to be deleted'},     |                          |
|                         | {'name': 'user_id',     |                          |
|                         | 'desc': 'user_id: A     |                          |
|                         | user for which quota is |                          |
|                         | to be deleted :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| quotas.get              |                         |                          |
|                         |                         |                          |
| quotas.run_hooks        | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| quotas.update           |                         |                          |
|                         |                         |                          |
| quotas.write_to_complet |                         |                          |
| ion_cache               |                         |                          |
| server_external_events. | {'name': 'cls', 'desc': | Add a new hook of        |
| add_hook                | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| server_external_events. |                         |                          |
| alternate_service_type  |                         |                          |
| server_external_events. |                         | The completion cache for |
| completion_cache        |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| server_external_events. |                         |                          |
| convert_into_with_meta  |                         |                          |
| server_external_events. | {'name': 'events',      | Create one or more       |
| create                  | 'desc': 'None'}         | server events.           |
|                         |                         | :param:events: A list of |
|                         |                         | dictionaries containing  |
|                         |                         | 'server_uuid', 'name',   |
|                         |                         | 'status', and 'tag'      |
|                         |                         | (which may be absent)    |
| server_external_events. | {'name': 'cls', 'desc': | Run all hooks of         |
| run_hooks               | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| server_external_events. |                         |                          |
| write_to_completion_cac |                         |                          |
| he                      |                         |                          |
| server_groups.add_hook  | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| server_groups.alternate |                         |                          |
| _service_type           |                         |                          |
| server_groups.completio |                         | The completion cache for |
| n_cache                 |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| server_groups.convert_i |                         |                          |
| nto_with_meta           |                         |                          |
| server_groups.create    | {'name': 'name',        | Create (allocate) a      |
|                         | 'desc': 'name: The name | server group.            |
|                         | of the server group.'}, |                          |
|                         | {'name': 'policies',    |                          |
|                         | 'desc': 'policies:      |                          |
|                         | Policy name or a list   |                          |
|                         | of exactly one policy   |                          |
|                         | name to  associate with |                          |
|                         | the server group.       |                          |
|                         | :rtype: list of         |                          |
|                         | :class:`ServerGroup`'}  |                          |
|                         |                         |                          |
| server_groups.delete    | {'name': 'id', 'desc':  | Delete a specific server |
|                         | 'id: The ID of the      | group.                   |
|                         | :class:`ServerGroup` to |                          |
|                         | delete. :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| server_groups.find      |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_groups.findall   |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_groups.get       | {'name': 'id', 'desc':  | Get a specific server    |
|                         | 'id: The ID of the      | group.                   |
|                         | :class:`ServerGroup` to |                          |
|                         | get. :rtype:            |                          |
|                         | :class:`ServerGroup`'}  |                          |
|                         |                         |                          |
| server_groups.list      | {'name':                | Get a list of all server |
|                         | 'all_projects', 'desc': | groups.                  |
|                         | 'all_projects: Lists    |                          |
|                         | server groups for all   |                          |
|                         | projects. (optional)'}, |                          |
|                         | {'name': 'limit',       |                          |
|                         | 'desc': 'limit: Maximum |                          |
|                         | number of server groups |                          |
|                         | to return.              |                          |
|                         | (optional)'},           |                          |
|                         | {'name': 'offset',      |                          |
|                         | 'desc': 'offset: Use    |                          |
|                         | with `limit` to return  |                          |
|                         | a slice of server       |                          |
|                         | groups. `offset` is     |                          |
|                         | where to start in the   |                          |
|                         | groups  list.           |                          |
|                         | (optional) :returns:    |                          |
|                         | list of                 |                          |
|                         | :class:`ServerGroup`.'} |                          |
|                         |                         |                          |
| server_groups.run_hooks | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| server_groups.write_to_ |                         |                          |
| completion_cache        |                         |                          |
| server_migrations.add_h | {'name': 'cls', 'desc': | Add a new hook of        |
| ook                     | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| server_migrations.alter |                         |                          |
| nate_service_type       |                         |                          |
| server_migrations.compl |                         | The completion cache for |
| etion_cache             |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| server_migrations.conve |                         |                          |
| rt_into_with_meta       |                         |                          |
| server_migrations.find  |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_migrations.finda |                         | Find all items with      |
| ll                      |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| server_migrations.get   | {'name': 'obj', 'desc': | Get a migration of a     |
|                         | 'server: The            | specified server         |
|                         | :class:`Server` (or its |                          |
|                         | ID)'}                   |                          |
|                         |                         |                          |
| server_migrations.list  | {'name': 'obj', 'desc': | Get a migrations list of |
|                         | 'server: The            | a specified server       |
|                         | :class:`Server` (or its |                          |
|                         | ID) :returns: An        |                          |
|                         | instance of novaclient. |                          |
|                         | base.ListWithMeta'}     |                          |
|                         |                         |                          |
| server_migrations.live_ | {'name': 'obj', 'desc': | Force on-going live      |
| migrate_force_complete  | 'server: The            | migration to complete    |
|                         | :class:`Server` (or its |                          |
|                         | ID)'}                   |                          |
|                         |                         |                          |
| server_migrations.live_ | {'name': 'obj', 'desc': | Cancel an ongoing live   |
| migration_abort         | 'server: The            | migration                |
|                         | :class:`Server` (or its |                          |
|                         | ID)'}                   |                          |
|                         |                         |                          |
| server_migrations.run_h | {'name': 'cls', 'desc': | Run all hooks of         |
| ooks                    | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| server_migrations.write |                         |                          |
| _to_completion_cache    |                         |                          |
| servers.add_fixed_ip    | {'name': 'obj', 'desc': | DEPRECATED Add an IP     |
|                         | 'server: The            | address on a network.    |
|                         | :class:`Server` (or its |                          |
|                         | ID) to add an IP to.'}  |                          |
|                         |                         |                          |
| servers.add_floating_ip | {'name': 'obj', 'desc': | DEPRECATED Add a         |
|                         | 'server: The            | floating IP to an        |
|                         | :class:`Server` (or its | instance                 |
|                         | ID) to add an IP to.'}  |                          |
|                         |                         |                          |
| servers.add_hook        | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| servers.add_security_gr | {'name': 'server',      | Add a Security Group to  |
| oup                     | 'desc': 'server: ID of  | an instance              |
|                         | the instance.'},        |                          |
|                         | {'name':                |                          |
|                         | 'security_group',       |                          |
|                         | 'desc':                 |                          |
|                         | 'security_group: The    |                          |
|                         | name of security group  |                          |
|                         | to add. :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.DictWithMeta'}     |                          |
|                         |                         |                          |
| servers.add_tag         | {'name': 'obj', 'desc': | Add single tag to an     |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.alternate_servi |                         |                          |
| ce_type                 |                         |                          |
| servers.backup          | {'name': 'server',      | Backup a server          |
|                         | 'desc': 'server: The    | instance.                |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'backup_name', |                          |
|                         | 'desc': 'backup_name:   |                          |
|                         | Name of the backup      |                          |
|                         | image'},                |                          |
|                         | {'name': 'backup_type', |                          |
|                         | 'desc': "backup_type:   |                          |
|                         | The backup type, like   |                          |
|                         | 'daily' or 'weekly'"},  |                          |
|                         | {'name': 'rotation',    |                          |
|                         | 'desc': 'rotation: Int  |                          |
|                         | parameter representing  |                          |
|                         | how many backups to     |                          |
|                         | keep around. :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta   |                          |
|                         | if the request          |                          |
|                         | microversion is < 2.45, |                          |
|                         | otherwise novaclient.ba |                          |
|                         | se.DictWithMeta.'}      |                          |
|                         |                         |                          |
| servers.change_password | {'name': 'server',      | Update the password for  |
|                         | 'desc': 'server: The    | a server.                |
|                         | :class:`Server` (or its |                          |
|                         | ID) for which the admin |                          |
|                         | password is to be       |                          |
|                         | changed :returns: An    |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'},   |                          |
|                         | {'name': 'password',    |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| servers.clear_password  | {'name': 'server',      | Clear the admin password |
|                         | 'desc': 'server: The    | of an instance  Remove   |
|                         | :class:`Server` (or its | the admin password for   |
|                         | ID) for which the admin | an instance from the     |
|                         | password is to be       | metadata server.         |
|                         | cleared'}               |                          |
|                         |                         |                          |
| servers.completion_cach |                         | The completion cache for |
| e                       |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| servers.confirm_resize  | {'name': 'server',      | Confirm that the resize  |
|                         | 'desc': 'server: The    | worked, thus removing    |
|                         | :class:`Server` (or its | the original server.     |
|                         | ID) to share onto.      |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.convert_into_wi |                         |                          |
| th_meta                 |                         |                          |
| servers.create          | {'name': 'name',        | Create (boot) a new      |
|                         | 'desc': 'name:          | server.                  |
|                         | Something to name the   |                          |
|                         | server.'},              |                          |
|                         | {'name': 'image',       |                          |
|                         | 'desc': 'image: The     |                          |
|                         | :class:`Image` to boot  |                          |
|                         | with.'},                |                          |
|                         | {'name': 'flavor',      |                          |
|                         | 'desc': 'flavor: The    |                          |
|                         | :class:`Flavor` to boot |                          |
|                         | onto.'},                |                          |
|                         | {'name': 'meta',        |                          |
|                         | 'desc': 'meta: A dict   |                          |
|                         | of arbitrary key/value  |                          |
|                         | metadata to store for   |                          |
|                         | this  server. Both keys |                          |
|                         | and values must be      |                          |
|                         | <=255 characters.'},    |                          |
|                         | {'name': 'files',       |                          |
|                         | 'desc': 'files: A dict  |                          |
|                         | of files to overwrite   |                          |
|                         | on the server upon      |                          |
|                         | boot.  Keys are file    |                          |
|                         | names (i.e.             |                          |
|                         | ``/etc/passwd``) and    |                          |
|                         | values  are the file    |                          |
|                         | contents (either as a   |                          |
|                         | string or as a  file-   |                          |
|                         | like object). A maximum |                          |
|                         | of five entries is      |                          |
|                         | allowed,  and each file |                          |
|                         | must be 10k or less.'}, |                          |
|                         | {'name':                |                          |
|                         | 'reservation_id',       |                          |
|                         | 'desc':                 |                          |
|                         | 'reservation_id: a UUID |                          |
|                         | for the set of servers  |                          |
|                         | being requested.'},     |                          |
|                         | {'name': 'min_count',   |                          |
|                         | 'desc': 'min_count:     |                          |
|                         | (optional extension)    |                          |
|                         | The minimum number of   |                          |
|                         | servers to launch.'},   |                          |
|                         | {'name': 'max_count',   |                          |
|                         | 'desc': 'max_count:     |                          |
|                         | (optional extension)    |                          |
|                         | The maximum number of   |                          |
|                         | servers to launch.'},   |                          |
|                         | {'name':                |                          |
|                         | 'security_groups',      |                          |
|                         | 'desc':                 |                          |
|                         | 'security_groups: A     |                          |
|                         | list of security group  |                          |
|                         | names'},                |                          |
|                         | {'name': 'userdata',    |                          |
|                         | 'desc': 'userdata: user |                          |
|                         | data to pass to be      |                          |
|                         | exposed by the metadata |                          |
|                         | server this can be a    |                          |
|                         | file type object as     |                          |
|                         | well or a  string.'},   |                          |
|                         | {'name': 'key_name',    |                          |
|                         | 'desc': 'key_name:      |                          |
|                         | (optional extension)    |                          |
|                         | name of previously      |                          |
|                         | created  keypair to     |                          |
|                         | inject into the         |                          |
|                         | instance.'},            |                          |
|                         | {'name':                |                          |
|                         | 'availability_zone',    |                          |
|                         | 'desc':                 |                          |
|                         | 'availability_zone:     |                          |
|                         | Name of the             |                          |
|                         | availability zone for   |                          |
|                         | instance  placement.'}, |                          |
|                         | {'name':                |                          |
|                         | 'block_device_mapping', |                          |
|                         | 'desc':                 |                          |
|                         | 'block_device_mapping:  |                          |
|                         | (optional extension) A  |                          |
|                         | dict of block  device   |                          |
|                         | mappings for this       |                          |
|                         | server.'},              |                          |
|                         | {'name': 'block_device_ |                          |
|                         | mapping_v2', 'desc': 'b |                          |
|                         | lock_device_mapping_v2: |                          |
|                         | (optional extension) A  |                          |
|                         | dict of block  device   |                          |
|                         | mappings for this       |                          |
|                         | server.'},              |                          |
|                         | {'name': 'nics',        |                          |
|                         | 'desc': "nics: An       |                          |
|                         | ordered list of nics    |                          |
|                         | (dicts) to be added to  |                          |
|                         | this  server, with      |                          |
|                         | information about       |                          |
|                         | connected networks,     |                          |
|                         | fixed IPs, port etc.    |                          |
|                         | Beginning in            |                          |
|                         | microversion 2.37 this  |                          |
|                         | field is required and   |                          |
|                         | also supports a single  |                          |
|                         | string value of 'auto'  |                          |
|                         | or 'none'.  The 'auto'  |                          |
|                         | value means the Compute |                          |
|                         | service will            |                          |
|                         | automatically allocate  |                          |
|                         | a network for the       |                          |
|                         | project if one  is not  |                          |
|                         | available. This is the  |                          |
|                         | same behavior as not    |                          |
|                         | passing anything for    |                          |
|                         | nics before             |                          |
|                         | microversion 2.37. The  |                          |
|                         | 'none' value tells the  |                          |
|                         | Compute service to not  |                          |
|                         | allocate  any           |                          |
|                         | networking for the      |                          |
|                         | server."},              |                          |
|                         | {'name':                |                          |
|                         | 'scheduler_hints',      |                          |
|                         | 'desc':                 |                          |
|                         | 'scheduler_hints:       |                          |
|                         | (optional extension)    |                          |
|                         | arbitrary key-value     |                          |
|                         | pairs  specified by the |                          |
|                         | client to help boot an  |                          |
|                         | instance'},             |                          |
|                         | {'name':                |                          |
|                         | 'config_drive', 'desc': |                          |
|                         | 'config_drive:          |                          |
|                         | (optional extension)    |                          |
|                         | value for config drive  |                          |
|                         | either boolean, or      |                          |
|                         | volume-id'},            |                          |
|                         | {'name': 'disk_config', |                          |
|                         | 'desc': "disk_config:   |                          |
|                         | (optional extension)    |                          |
|                         | control how the disk is |                          |
|                         | partitioned when the    |                          |
|                         | server is created.      |                          |
|                         | possible  values are    |                          |
|                         | 'AUTO' or 'MANUAL'."},  |                          |
|                         | {'name': 'admin_pass',  |                          |
|                         | 'desc': 'admin_pass:    |                          |
|                         | (optional extension)    |                          |
|                         | add a user supplied     |                          |
|                         | admin  password.'},     |                          |
|                         | {'name':                |                          |
|                         | 'access_ip_v4', 'desc': |                          |
|                         | 'access_ip_v4:          |                          |
|                         | (optional extension)    |                          |
|                         | add alternative access  |                          |
|                         | ip v4'},                |                          |
|                         | {'name':                |                          |
|                         | 'access_ip_v6', 'desc': |                          |
|                         | 'access_ip_v6:          |                          |
|                         | (optional extension)    |                          |
|                         | add alternative access  |                          |
|                         | ip v6'}                 |                          |
|                         |                         |                          |
| servers.create_image    | {'name': 'server',      | Snapshot a server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'image_name',  |                          |
|                         | 'desc': 'image_name:    |                          |
|                         | Name to give the        |                          |
|                         | snapshot image'},       |                          |
|                         | {'name': 'metadata',    |                          |
|                         | 'desc': "metadata:      |                          |
|                         | Metadata to give newly- |                          |
|                         | created image entity    |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.StrW |                          |
|                         | ithMeta  (The snapshot  |                          |
|                         | image's UUID)"}         |                          |
|                         |                         |                          |
| servers.delete          | {'name': 'server',      | Delete (i.e. shut down   |
|                         | 'desc': 'server: The    | and delete the image)    |
|                         | :class:`Server` (or its | this server.             |
|                         | ID) to delete :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.delete_all_tags | {'name': 'obj', 'desc': | Remove all tags from an  |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.delete_meta     | {'name': 'server',      | Delete metadata from a   |
|                         | 'desc': 'server: The    | server                   |
|                         | :class:`Server` to add  |                          |
|                         | metadata to'},          |                          |
|                         | {'name': 'keys',        |                          |
|                         | 'desc': 'keys: A list   |                          |
|                         | of metadata keys to     |                          |
|                         | delete from the server  |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.delete_tag      | {'name': 'obj', 'desc': | Remove single tag from   |
|                         | 'None'}                 | an instance.             |
|                         |                         |                          |
| servers.diagnostics     | {'name': 'server',      | Retrieve server          |
|                         | 'desc': 'server: The    | diagnostics.             |
|                         | :class:`Server` (or its |                          |
|                         | ID) for which           |                          |
|                         | diagnostics to be       |                          |
|                         | returned :returns: An   |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| servers.evacuate        | {'name': 'obj', 'desc': | Evacuate a server        |
|                         | 'server: The            | instance.                |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'}    |                          |
|                         |                         |                          |
| servers.find            |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| servers.findall         |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| servers.force_delete    | {'name': 'server',      | Force delete the server. |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to force delete     |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.get             | {'name': 'server',      | Get a server.            |
|                         | 'desc': 'server: ID of  |                          |
|                         | the :class:`Server` to  |                          |
|                         | get. :rtype:            |                          |
|                         | :class:`Server`'}       |                          |
|                         |                         |                          |
| servers.get_console_out | {'name': 'server',      | Get text console log     |
| put                     | 'desc': 'server: The    | output from Server.      |
|                         | :class:`Server` (or its |                          |
|                         | ID) whose console       |                          |
|                         | output  you would like  |                          |
|                         | to retrieve.'},         |                          |
|                         | {'name': 'length',      |                          |
|                         | 'desc': 'length: The    |                          |
|                         | number of tail loglines |                          |
|                         | you would like to       |                          |
|                         | retrieve. :returns: An  |                          |
|                         | instance of novaclient. |                          |
|                         | base.StrWithMeta or  no |                          |
|                         | vaclient.base.UnicodeWi |                          |
|                         | thMeta'}                |                          |
|                         |                         |                          |
| servers.get_console_url | {'name': 'obj', 'desc': | Retrieve a console url   |
|                         | 'server: server to get  | of a server.             |
|                         | console url for'}       |                          |
|                         |                         |                          |
| servers.get_mks_console | {'name': 'obj', 'desc': | Get a mks console for an |
|                         | 'server: The            | instance                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console for. |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Dict |                          |
|                         | WithMeta'}              |                          |
|                         |                         |                          |
| servers.get_password    | {'name': 'server',      | Get admin password of an |
|                         | 'desc': 'server: The    | instance  Returns the    |
|                         | :class:`Server` (or its | admin password of an     |
|                         | ID) for which the admin | instance in the clear if |
|                         | password is to be       | private_key is provided, |
|                         | returned'},             | returns the ciphered     |
|                         | {'name': 'private_key', | password otherwise.      |
|                         | 'desc': 'private_key:   | Requires that openssl is |
|                         | The private key to      | installed and in the     |
|                         | decrypt password        | path                     |
|                         | (optional) :returns: An |                          |
|                         | instance of novaclient. |                          |
|                         | base.StrWithMeta or  no |                          |
|                         | vaclient.base.BytesWith |                          |
|                         | Meta or  novaclient.bas |                          |
|                         | e.UnicodeWithMeta'}     |                          |
|                         |                         |                          |
| servers.get_rdp_console | {'name': 'server',      | Get a rdp console for an |
|                         | 'desc': 'server: The    | instance                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | rdp console to get      |                          |
|                         | ('rdp-html5') :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.DictWithMeta"}  |                          |
|                         |                         |                          |
| servers.get_serial_cons | {'name': 'server',      | Get a serial console for |
| ole                     | 'desc': 'server: The    | an instance              |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | serial console to get   |                          |
|                         | ('serial') :returns: An |                          |
|                         | instance of novaclient. |                          |
|                         | base.DictWithMeta"}     |                          |
|                         |                         |                          |
| servers.get_spice_conso | {'name': 'server',      | Get a spice console for  |
| le                      | 'desc': 'server: The    | an instance              |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | spice console to get    |                          |
|                         | ('spice-html5')         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Dict |                          |
|                         | WithMeta"}              |                          |
|                         |                         |                          |
| servers.get_vnc_console | {'name': 'server',      | Get a vnc console for an |
|                         | 'desc': 'server: The    | instance                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to get console      |                          |
|                         | for.'},                 |                          |
|                         | {'name':                |                          |
|                         | 'console_type', 'desc': |                          |
|                         | "console_type: Type of  |                          |
|                         | vnc console to get      |                          |
|                         | ('novnc' or 'xvpvnc')   |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Dict |                          |
|                         | WithMeta"}              |                          |
|                         |                         |                          |
| servers.interface_attac | {'name': 'obj', 'desc': | Attach a                 |
| h                       | 'server: The            | network_interface to an  |
|                         | :class:`Server` (or its | instance.                |
|                         | ID) to attach to.'}     |                          |
|                         |                         |                          |
| servers.interface_detac | {'name': 'server',      | Detach a                 |
| h                       | 'desc': 'server: The    | network_interface from   |
|                         | :class:`Server` (or its | an instance.             |
|                         | ID) to detach from.'},  |                          |
|                         | {'name': 'port_id',     |                          |
|                         | 'desc': 'port_id: The   |                          |
|                         | port to detach.         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.interface_list  | {'name': 'server',      | List attached network    |
|                         | 'desc': 'server: The    | interfaces               |
|                         | :class:`Server` (or its |                          |
|                         | ID) to query.'}         |                          |
|                         |                         |                          |
| servers.ips             | {'name': 'server',      | Return IP Addresses      |
|                         | 'desc': 'server: The    | associated with the      |
|                         | :class:`Server` (or its | server.  Often a cheaper |
|                         | ID) for which  the IP   | call then getting all    |
|                         | adresses are to be      | the details for a        |
|                         | returned :returns: An   | server.                  |
|                         | instance of novaclient. |                          |
|                         | base.DictWithMeta'}     |                          |
|                         |                         |                          |
| servers.list            | {'name': 'detailed',    | Get a list of servers.   |
|                         | 'desc': 'detailed:      |                          |
|                         | Whether to return       |                          |
|                         | detailed server info    |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'search_opts', |                          |
|                         | 'desc': "search_opts:   |                          |
|                         | Search options to       |                          |
|                         | filter out servers      |                          |
|                         | which don't  match the  |                          |
|                         | search_opts (optional). |                          |
|                         | The search opts format  |                          |
|                         | is a  dictionary of key |                          |
|                         | / value pairs that will |                          |
|                         | be appended to the      |                          |
|                         | query  string. For a    |                          |
|                         | complete list of keys   |                          |
|                         | see:  http://developer. |                          |
|                         | openstack.org/api-ref-c |                          |
|                         | ompute-v2.1.html#listSe |                          |
|                         | rvers"},                |                          |
|                         | {'name': 'marker',      |                          |
|                         | 'desc': 'marker: Begin  |                          |
|                         | returning servers that  |                          |
|                         | appear later in the     |                          |
|                         | server  list than that  |                          |
|                         | represented by this     |                          |
|                         | server id               |                          |
|                         | (optional).'},          |                          |
|                         | {'name': 'limit',       |                          |
|                         | 'desc': 'limit: Maximum |                          |
|                         | number of servers to    |                          |
|                         | return (optional).'},   |                          |
|                         | {'name': 'sort_keys',   |                          |
|                         | 'desc': 'sort_keys:     |                          |
|                         | List of sort keys'},    |                          |
|                         | {'name': 'sort_dirs',   |                          |
|                         | 'desc': "sort_dirs:     |                          |
|                         | List of sort directions |                          |
|                         | :rtype: list of         |                          |
|                         | :class:`Server`         |                          |
|                         | Examples:               |                          |
|                         | client.servers.list() - |                          |
|                         | returns detailed list   |                          |
|                         | of servers  client.serv |                          |
|                         | ers.list(search_opts={' |                          |
|                         | status': 'ERROR'}) -    |                          |
|                         | returns list of servers |                          |
|                         | in error state.  client |                          |
|                         | .servers.list(limit=10) |                          |
|                         | - returns only 10       |                          |
|                         | servers"}               |                          |
|                         |                         |                          |
| servers.list_security_g | {'name': 'server',      | List Security Group(s)   |
| roup                    | 'desc': 'server: ID of  | of an instance           |
|                         | the instance.'}         |                          |
|                         |                         |                          |
| servers.live_migrate    | {'name': 'obj', 'desc': | Migrates a running       |
|                         | 'server: instance id    | instance to a new        |
|                         | which comes from nova   | machine.                 |
|                         | list.'}                 |                          |
|                         |                         |                          |
| servers.lock            | {'name': 'server',      | Lock the server.         |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to lock :returns:   |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.migrate         | {'name': 'server',      | Migrate a server to a    |
|                         | 'desc': 'server: The    | new host.                |
|                         | :class:`Server` (or its |                          |
|                         | ID). :returns: An       |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| servers.pause           | {'name': 'server',      | Pause the server.        |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to pause :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.reboot          | {'name': 'server',      | Reboot a server.         |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'reboot_type', |                          |
|                         | 'desc': 'reboot_type:   |                          |
|                         | either                  |                          |
|                         | :data:`REBOOT_SOFT` for |                          |
|                         | a software-level        |                          |
|                         | reboot, or              |                          |
|                         | `REBOOT_HARD` for a     |                          |
|                         | virtual power cycle     |                          |
|                         | hard reboot. :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.rebuild         | {'name': 'server',      | Rebuild -- shut down and |
|                         | 'desc': 'server: The    | then re-image -- a       |
|                         | :class:`Server` (or its | server.                  |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'image',       |                          |
|                         | 'desc': 'image: the     |                          |
|                         | :class:`Image` (or its  |                          |
|                         | ID) to re-image         |                          |
|                         | with.'},                |                          |
|                         | {'name': 'password',    |                          |
|                         | 'desc': 'password:      |                          |
|                         | string to set as        |                          |
|                         | password on the rebuilt |                          |
|                         | server.'},              |                          |
|                         | {'name': 'disk_config', |                          |
|                         | 'desc': "disk_config:   |                          |
|                         | partitioning mode to    |                          |
|                         | use on the rebuilt      |                          |
|                         | server.  Valid values   |                          |
|                         | are 'AUTO' or           |                          |
|                         | 'MANUAL'"},             |                          |
|                         | {'name':                |                          |
|                         | 'preserve_ephemeral',   |                          |
|                         | 'desc':                 |                          |
|                         | 'preserve_ephemeral: If |                          |
|                         | True, request that any  |                          |
|                         | ephemeral device  be    |                          |
|                         | preserved when          |                          |
|                         | rebuilding the          |                          |
|                         | instance. Defaults to   |                          |
|                         | False.'},               |                          |
|                         | {'name': 'name',        |                          |
|                         | 'desc': 'name:          |                          |
|                         | Something to name the   |                          |
|                         | server.'},              |                          |
|                         | {'name': 'meta',        |                          |
|                         | 'desc': 'meta: A dict   |                          |
|                         | of arbitrary key/value  |                          |
|                         | metadata to store for   |                          |
|                         | this  server. Both keys |                          |
|                         | and values must be      |                          |
|                         | <=255 characters.'},    |                          |
|                         | {'name': 'files',       |                          |
|                         | 'desc': 'files: A dict  |                          |
|                         | of files to overwrite   |                          |
|                         | on the server upon      |                          |
|                         | boot.  Keys are file    |                          |
|                         | names (i.e.             |                          |
|                         | ``/etc/passwd``) and    |                          |
|                         | values  are the file    |                          |
|                         | contents (either as a   |                          |
|                         | string or as a  file-   |                          |
|                         | like object). A maximum |                          |
|                         | of five entries is      |                          |
|                         | allowed,  and each file |                          |
|                         | must be 10k or less.'}  |                          |
|                         |                         |                          |
| servers.remove_fixed_ip | {'name': 'obj', 'desc': | DEPRECATED Remove an IP  |
|                         | 'server: The            | address.                 |
|                         | :class:`Server` (or its |                          |
|                         | ID) to add an IP to.'}  |                          |
|                         |                         |                          |
| servers.remove_floating | {'name': 'obj', 'desc': | DEPRECATED Remove a      |
| _ip                     | 'server: The            | floating IP address.     |
|                         | :class:`Server` (or its |                          |
|                         | ID) to remove an IP     |                          |
|                         | from.'}                 |                          |
|                         |                         |                          |
| servers.remove_security | {'name': 'server',      | Remove a Security Group  |
| _group                  | 'desc': 'server: ID of  | to an instance           |
|                         | the instance.'},        |                          |
|                         | {'name':                |                          |
|                         | 'security_group',       |                          |
|                         | 'desc':                 |                          |
|                         | 'security_group: The    |                          |
|                         | name of security group  |                          |
|                         | to remove. :returns: An |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'}    |                          |
|                         |                         |                          |
| servers.rescue          | {'name': 'server',      | Rescue the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` to      |                          |
|                         | rescue.'},              |                          |
|                         | {'name': 'password',    |                          |
|                         | 'desc': 'password: The  |                          |
|                         | admin password to be    |                          |
|                         | set in the rescue       |                          |
|                         | instance.'},            |                          |
|                         | {'name': 'image',       |                          |
|                         | 'desc': 'image: The     |                          |
|                         | :class:`Image` to       |                          |
|                         | rescue with. :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.reset_network   | {'name': 'server',      | Reset network of an      |
|                         | 'desc': 'server: The    | instance.                |
|                         | :class:`Server` for     |                          |
|                         | network is to be reset  |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.reset_state     | {'name': 'server',      | Reset the state of an    |
|                         | 'desc': 'server: ID of  | instance to active or    |
|                         | the instance to reset   | error.                   |
|                         | the state of.'},        |                          |
|                         | {'name': 'state',       |                          |
|                         | 'desc': "state: Desired |                          |
|                         | state; either 'active'  |                          |
|                         | or 'error'.  Defaults   |                          |
|                         | to 'error'. :returns:   |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta"} |                          |
|                         |                         |                          |
| servers.resize          | {'name': 'server',      | Resize a server's        |
|                         | 'desc': 'server: The    | resources.               |
|                         | :class:`Server` (or its |                          |
|                         | ID) to share onto.'},   |                          |
|                         | {'name': 'flavor',      |                          |
|                         | 'desc': 'flavor: the    |                          |
|                         | :class:`Flavor` (or its |                          |
|                         | ID) to resize to.'},    |                          |
|                         | {'name': 'disk_config', |                          |
|                         | 'desc': "disk_config:   |                          |
|                         | partitioning mode to    |                          |
|                         | use on the rebuilt      |                          |
|                         | server.  Valid values   |                          |
|                         | are 'AUTO' or 'MANUAL'  |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta  Until a      |                          |
|                         | resize event is         |                          |
|                         | confirmed with          |                          |
|                         | :meth:`confirm_resize`, |                          |
|                         | the old server will be  |                          |
|                         | kept around and you'll  |                          |
|                         | be able to roll back to |                          |
|                         | the old flavor quickly  |                          |
|                         | with                    |                          |
|                         | :meth:`revert_resize`.  |                          |
|                         | All resizes are         |                          |
|                         | automatically confirmed |                          |
|                         | after 24 hours."}       |                          |
|                         |                         |                          |
| servers.restore         | {'name': 'server',      | Restore soft-deleted     |
|                         | 'desc': 'server: The    | server.                  |
|                         | :class:`Server` (or its |                          |
|                         | ID) to restore          |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.resume          | {'name': 'server',      | Resume the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to resume :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.revert_resize   | {'name': 'server',      | Revert a previous        |
|                         | 'desc': 'server: The    | resize, switching back   |
|                         | :class:`Server` (or its | to the old server.       |
|                         | ID) to share onto.      |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.run_hooks       | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| servers.set_meta        | {'name': 'server',      | Set a server's metadata  |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` to add  |                          |
|                         | metadata to'},          |                          |
|                         | {'name': 'metadata',    |                          |
|                         | 'desc': 'metadata: A    |                          |
|                         | dict of metadata to be  |                          |
|                         | added to the server'}   |                          |
|                         |                         |                          |
| servers.set_meta_item   | {'name': 'server',      | Updates an item of       |
|                         | 'desc': 'server: The    | server metadata          |
|                         | :class:`Server` to add  |                          |
|                         | metadata to'},          |                          |
|                         | {'name': 'key', 'desc': |                          |
|                         | 'key: metadata key to   |                          |
|                         | update'},               |                          |
|                         | {'name': 'value',       |                          |
|                         | 'desc': 'value: string  |                          |
|                         | value'}                 |                          |
|                         |                         |                          |
| servers.set_tags        | {'name': 'obj', 'desc': | Set list of tags to an   |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.shelve          | {'name': 'server',      | Shelve the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to shelve :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.shelve_offload  | {'name': 'server',      | Remove a shelved         |
|                         | 'desc': 'server: The    | instance from the        |
|                         | :class:`Server` (or its | compute node.            |
|                         | ID) to shelve offload   |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.start           | {'name': 'server',      | Start the server.        |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to start :returns:  |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.stop            | {'name': 'server',      | Stop the server.         |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to stop :returns:   |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.suspend         | {'name': 'server',      | Suspend the server.      |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to suspend          |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.tag_list        | {'name': 'obj', 'desc': | Get list of tags from an |
|                         | 'None'}                 | instance.                |
|                         |                         |                          |
| servers.trigger_crash_d | {'name': 'obj', 'desc': | Trigger crash dump in an |
| ump                     | 'None'}                 | instance                 |
|                         |                         |                          |
| servers.unlock          | {'name': 'server',      | Unlock the server.       |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unlock :returns: |                          |
|                         | An instance of novaclie |                          |
|                         | nt.base.TupleWithMeta'} |                          |
|                         |                         |                          |
| servers.unpause         | {'name': 'server',      | Unpause the server.      |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unpause          |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.unrescue        | {'name': 'server',      | Unrescue the server.     |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unrescue         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.unshelve        | {'name': 'server',      | Unshelve the server.     |
|                         | 'desc': 'server: The    |                          |
|                         | :class:`Server` (or its |                          |
|                         | ID) to unshelve         |                          |
|                         | :returns: An instance   |                          |
|                         | of novaclient.base.Tupl |                          |
|                         | eWithMeta'}             |                          |
|                         |                         |                          |
| servers.update          | {'name': 'obj', 'desc': | Update the name or the   |
|                         | 'server: The            | description for a        |
|                         | :class:`Server` (or its | server.                  |
|                         | ID) to update.'}        |                          |
|                         |                         |                          |
| servers.write_to_comple |                         |                          |
| tion_cache              |                         |                          |
| servers_set_meta        | {'name': 'server',      | A wrapper for            |
|                         | 'description': 'server  | servers.set_meta()       |
|                         | id'},                   |                          |
|                         | {'name': 'meta-key1',   |                          |
|                         | 'description': 'meta    |                          |
|                         | key 1'},                |                          |
|                         | {'name': 'meta-value1', |                          |
|                         | 'description': 'value   |                          |
|                         | for meta key1'},        |                          |
|                         | {'name': 'meta-keyN',   |                          |
|                         | 'description': 'meta    |                          |
|                         | key N'},                |                          |
|                         | {'name': 'meta-valueN', |                          |
|                         | 'description': 'value   |                          |
|                         | for meta keyN'}         |                          |
|                         |                         |                          |
| services.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| services.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| services.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| services.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| services.delete         | {'name': 'service_id',  | Delete a service.        |
|                         | 'desc': 'service_id:    |                          |
|                         | Before microversion     |                          |
|                         | 2.53, this must be an   |                          |
|                         | integer id  and may not |                          |
|                         | uniquely the service in |                          |
|                         | a multi-cell            |                          |
|                         | deployment.  Starting   |                          |
|                         | with microversion 2.53  |                          |
|                         | this must be a UUID.'}  |                          |
|                         |                         |                          |
| services.disable        | {'name': 'obj', 'desc': | Disable the service      |
|                         | 'service_uuid: The UUID | specified by the service |
|                         | ID of the service to    | UUID ID.                 |
|                         | disable.'}              |                          |
|                         |                         |                          |
| services.disable_log_re | {'name': 'obj', 'desc': | Disable the service with |
| ason                    | 'service_uuid: The UUID | a reason.                |
|                         | ID of the service to    |                          |
|                         | disable.'}              |                          |
|                         |                         |                          |
| services.enable         | {'name': 'obj', 'desc': | Enable the service       |
|                         | 'service_uuid: The UUID | specified by the service |
|                         | ID of the service to    | UUID ID.                 |
|                         | enable.'}               |                          |
|                         |                         |                          |
| services.find           |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| services.findall        |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| services.force_down     | {'name': 'obj', 'desc': | Update the service's     |
|                         | 'service_uuid: The UUID | ``forced_down`` field    |
|                         | ID of the service.'}    | specified by the service |
|                         |                         | UUID ID.                 |
| services.list           | {'name': 'host',        | Get a list of services.  |
|                         | 'desc': 'host:          |                          |
|                         | destination host        |                          |
|                         | name.'},                |                          |
|                         | {'name': 'binary',      |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| services.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| services.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| usage.add_hook          | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| usage.alternate_service |                         |                          |
| _type                   |                         |                          |
| usage.completion_cache  |                         | The completion cache for |
|                         |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| usage.convert_into_with |                         |                          |
| _meta                   |                         |                          |
| usage.find              |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| usage.findall           |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| usage.get               | {'name': 'obj', 'desc': | Get usage for a specific |
|                         | 'tenant_id: Tenant ID   | tenant.                  |
|                         | to fetch usage for'}    |                          |
|                         |                         |                          |
| usage.list              | {'name': 'obj', 'desc': | Get usage for all        |
|                         | 'start: :class:`datetim | tenants                  |
|                         | e.datetime` Start date  |                          |
|                         | in UTC'}                |                          |
|                         |                         |                          |
| usage.run_hooks         | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| usage.write_to_completi |                         |                          |
| on_cache                |                         |                          |
| versions.add_hook       | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| versions.alternate_serv |                         |                          |
| ice_type                |                         |                          |
| versions.completion_cac |                         | The completion cache for |
| he                      |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| versions.convert_into_w |                         |                          |
| ith_meta                |                         |                          |
| versions.find           |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| versions.findall        |                         | Find all items with      |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| versions.get_current    |                         |                          |
|                         |                         |                          |
| versions.list           |                         | List all versions.       |
|                         |                         |                          |
| versions.run_hooks      | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| versions.write_to_compl |                         |                          |
| etion_cache             |                         |                          |
| virtual_interfaces.add_ | {'name': 'cls', 'desc': | Add a new hook of        |
| hook                    | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| virtual_interfaces.alte |                         |                          |
| rnate_service_type      |                         |                          |
| virtual_interfaces.comp |                         | The completion cache for |
| letion_cache            |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| virtual_interfaces.conv |                         |                          |
| ert_into_with_meta      |                         |                          |
| virtual_interfaces.find |                         | Find a single item with  |
|                         |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| virtual_interfaces.find |                         | Find all items with      |
| all                     |                         | attributes matching      |
|                         |                         | ``**kwargs``.            |
| virtual_interfaces.list | {'name': 'obj', 'desc': | DEPRECATED               |
|                         | 'None'}                 |                          |
|                         |                         |                          |
| virtual_interfaces.run_ | {'name': 'cls', 'desc': | Run all hooks of         |
| hooks                   | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| virtual_interfaces.writ |                         |                          |
| e_to_completion_cache   |                         |                          |
| volumes.add_hook        | {'name': 'cls', 'desc': | Add a new hook of        |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}, |                          |
|                         | {'name': 'hook_func',   |                          |
|                         | 'desc': 'hook_func:     |                          |
|                         | hook function'}         |                          |
|                         |                         |                          |
| volumes.alternate_servi |                         |                          |
| ce_type                 |                         |                          |
| volumes.completion_cach |                         | The completion cache for |
| e                       |                         | bash autocompletion.     |
|                         |                         | The completion cache     |
|                         |                         | store items that can be  |
|                         |                         | used for bash            |
|                         |                         | autocompletion, like     |
|                         |                         | UUIDs or human-friendly  |
|                         |                         | IDs.  A resource listing |
|                         |                         | will clear and           |
|                         |                         | repopulate the cache.  A |
|                         |                         | resource create will     |
|                         |                         | append to the cache.     |
|                         |                         | Delete is not handled    |
|                         |                         | because listings are     |
|                         |                         | assumed to be performed  |
|                         |                         | often enough to keep the |
|                         |                         | cache reasonably up-to-  |
|                         |                         | date.                    |
| volumes.convert_into_wi |                         |                          |
| th_meta                 |                         |                          |
| volumes.create_server_v | {'name': 'obj', 'desc': | Attach a volume          |
| olume                   | 'server_id: The ID of   | identified by the volume |
|                         | the server'}            | ID to the given server   |
|                         |                         | ID                       |
| volumes.delete_server_v | {'name': 'server_id',   | Detach a volume          |
| olume                   | 'desc': 'server_id: The | identified by the volume |
|                         | ID of the server'},     | ID from the given server |
|                         | {'name': 'volume_id',   |                          |
|                         | 'desc': 'volume_id: The |                          |
|                         | ID of the volume to     |                          |
|                         | attach :returns: An     |                          |
|                         | instance of novaclient. |                          |
|                         | base.TupleWithMeta'},   |                          |
|                         | {'name':                |                          |
|                         | 'attachment_id',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| volumes.get_server_volu | {'name': 'server_id',   | Get the volume           |
| me                      | 'desc': 'server_id: The | identified by the volume |
|                         | ID of the server'},     | ID, that is attached to  |
|                         | {'name': 'volume_id',   | the given server ID      |
|                         | 'desc': 'volume_id: The |                          |
|                         | ID of the volume to     |                          |
|                         | attach :rtype:          |                          |
|                         | :class:`Volume`'},      |                          |
|                         | {'name':                |                          |
|                         | 'attachment_id',        |                          |
|                         | 'desc': 'None'}         |                          |
|                         |                         |                          |
| volumes.get_server_volu | {'name': 'server_id',   | Get a list of all the    |
| mes                     | 'desc': 'server_id: The | attached volumes for the |
|                         | ID of the server        | given server ID          |
|                         | :rtype: list of         |                          |
|                         | :class:`Volume`'}       |                          |
|                         |                         |                          |
| volumes.run_hooks       | {'name': 'cls', 'desc': | Run all hooks of         |
|                         | 'cls: class that        | specified type.          |
|                         | registers hooks'},      |                          |
|                         | {'name': 'hook_type',   |                          |
|                         | 'desc': "hook_type:     |                          |
|                         | hook type, e.g.,        |                          |
|                         | '__pre_parse_args__'"}  |                          |
|                         |                         |                          |
| volumes.update_server_v | {'name': 'server_id',   | Swaps the existing       |
| olume                   | 'desc': 'server_id: The | volume attachment to     |
|                         | ID of the server'},     | point to a new volume.   |
|                         | {'name': 'src_volid',   | Takes a server, a source |
|                         | 'desc': 'source_volume: | (attached) volume and a  |
|                         | The ID of the src       | destination volume and   |
|                         | volume'},               | performs a hypervisor    |
|                         | {'name': 'dest_volid',  | assisted data migration  |
|                         | 'desc': 'dest_volume:   | from src to dest volume, |
|                         | The ID of the           | detaches the original    |
|                         | destination volume      | (source) volume and      |
|                         | :rtype:                 | attaches the new         |
|                         | :class:`Volume`'}       | destination volume. Note |
|                         |                         | that not all backing     |
|                         |                         | hypervisor drivers       |
|                         |                         | support this operation   |
|                         |                         | and it may be disabled   |
|                         |                         | via policy.              |
| volumes.write_to_comple |                         |                          |
| tion_cache              |                         |                          |
+-------------------------+-------------------------+--------------------------+
+./scripts/manual_testing/general.sh:main:18  openstack congress datasource list
+--------------------+------------+---------+------------+---------------------+
| id                 | name       | enabled | driver     | config              |
+--------------------+------------+---------+------------+---------------------+
| 1afc7320-5abe-     | cinder     | True    | cinder     | {'username':        |
| 4b8f-              |            |         |            | 'admin',            |
| 81d4-886e7a4a65a2  |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| 3bf88455-8b22-4327 | nova2      | True    | nova       | {'username':        |
| -81d2-0189aea0325c |            |         |            | 'admin',            |
|                    |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '5',   |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /127.0.0.1/identity |
|                    |            |         |            | '}                  |
| 5691cd2d-0e87-4147 | glancev2   | True    | glancev2   | {'username':        |
| -92bd-37f4110b6d77 |            |         |            | 'admin',            |
|                    |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| 6168b229-7a38-4614 | neutronv2  | True    | neutronv2  | {'username':        |
| -a225-96e3be5719c8 |            |         |            | 'admin',            |
|                    |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| 8cfe1784-d06c-4545 | nova       | True    | nova       | {'username':        |
| -95b3-ba0a9adc1a12 |            |         |            | 'admin',            |
|                    |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| bbbec776-ee2b-4b89 | murano     | True    | murano     | {'username':        |
| -bfec-bd37ab697a7f |            |         |            | 'admin',            |
|                    |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| ea3ca72e-fda0      | heat       | True    | heat       | {'username':        |
| -4b0c-898d-        |            |         |            | 'admin',            |
| 4fa81a160849       |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| f1933673-097f-46a9 | keystonev3 | True    | keystonev3 | {'username':        |
| -869d-5b05a41e16a9 |            |         |            | 'admin',            |
|                    |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
| f931b93d-b57d-     | aodh       | True    | aodh       | {'username':        |
| 425f-              |            |         |            | 'admin',            |
| b1a0-8642bc887707  |            |         |            | 'tenant_name':      |
|                    |            |         |            | 'admin',            |
|                    |            |         |            | 'poll_time': '10',  |
|                    |            |         |            | 'password':         |
|                    |            |         |            | '<hidden>',         |
|                    |            |         |            | 'auth_url': 'http:/ |
|                    |            |         |            | /192.168.218.184/id |
|                    |            |         |            | entity'}            |
+--------------------+------------+---------+------------+---------------------+
+./scripts/manual_testing/general.sh:main:19  openstack congress datasource request-refresh nova2
+./scripts/manual_testing/general.sh:main:20  openstack congress datasource request-refresh 3bf88455-8b22-4327-81d2-0189aea0325c
+./scripts/manual_testing/general.sh:main:21  openstack congress datasource schema show nova2
+--------------------+---------------------------------------------------------+
| table              | columns                                                 |
+--------------------+---------------------------------------------------------+
| flavors            | {'name': 'id', 'description': 'ID of the flavor'},      |
|                    | {'name': 'name', 'description': 'Name of the flavor'},  |
|                    | {'name': 'vcpus', 'description': 'Number of vcpus'},    |
|                    | {'name': 'ram', 'description': 'Memory size in MB'},    |
|                    | {'name': 'disk', 'description': 'Disk size in GB'},     |
|                    | {'name': 'ephemeral', 'description': 'Ephemeral space   |
|                    | size in GB'},                                           |
|                    | {'name': 'rxtx_factor', 'description': 'RX/TX factor'}  |
|                    |                                                         |
| services           | {'name': 'service_id', 'description': 'Service ID'},    |
|                    | {'name': 'binary', 'description': 'Service binary'},    |
|                    | {'name': 'host', 'description': 'Host Name'},           |
|                    | {'name': 'zone', 'description': 'Availability Zone'},   |
|                    | {'name': 'status', 'description': 'Status of service'}, |
|                    | {'name': 'state', 'description': 'State of service'},   |
|                    | {'name': 'updated_at', 'description': 'Last updated     |
|                    | time'},                                                 |
|                    | {'name': 'disabled_reason', 'description': 'Disabled    |
|                    | reason'}                                                |
|                    |                                                         |
| availability_zones | {'name': 'zone', 'description': 'Availability zone      |
|                    | name'},                                                 |
|                    | {'name': 'state', 'description': 'Availability zone     |
|                    | state'}                                                 |
|                    |                                                         |
| hosts              | {'name': 'host_name', 'description': 'Name of host'},   |
|                    | {'name': 'service', 'description': 'Enabled service'},  |
|                    | {'name': 'zone', 'description': 'The availability zone  |
|                    | of host'}                                               |
|                    |                                                         |
| servers            | {'name': 'id', 'description': 'The UUID for the         |
|                    | server'},                                               |
|                    | {'name': 'name', 'description': 'Name of the server'},  |
|                    | {'name': 'host_id', 'description': 'The UUID for the    |
|                    | host'},                                                 |
|                    | {'name': 'status', 'description': 'The server status'}, |
|                    | {'name': 'tenant_id', 'description': 'The tenant ID'},  |
|                    | {'name': 'user_id', 'description': 'The user ID of the  |
|                    | user who owns the server'},                             |
|                    | {'name': 'image_id', 'description': 'Name or ID of      |
|                    | image'},                                                |
|                    | {'name': 'flavor_id', 'description': 'ID of the         |
|                    | flavor'},                                               |
|                    | {'name': 'zone', 'description': 'The availability zone  |
|                    | of host'},                                              |
|                    | {'name': 'host_name', 'description': 'The hostname of   |
|                    | hypervisor where the server is running'}                |
|                    |                                                         |
+--------------------+---------------------------------------------------------+
+./scripts/manual_testing/general.sh:main:22  openstack congress datasource schema show 3bf88455-8b22-4327-81d2-0189aea0325c
+--------------------+---------------------------------------------------------+
| table              | columns                                                 |
+--------------------+---------------------------------------------------------+
| flavors            | {'name': 'id', 'description': 'ID of the flavor'},      |
|                    | {'name': 'name', 'description': 'Name of the flavor'},  |
|                    | {'name': 'vcpus', 'description': 'Number of vcpus'},    |
|                    | {'name': 'ram', 'description': 'Memory size in MB'},    |
|                    | {'name': 'disk', 'description': 'Disk size in GB'},     |
|                    | {'name': 'ephemeral', 'description': 'Ephemeral space   |
|                    | size in GB'},                                           |
|                    | {'name': 'rxtx_factor', 'description': 'RX/TX factor'}  |
|                    |                                                         |
| services           | {'name': 'service_id', 'description': 'Service ID'},    |
|                    | {'name': 'binary', 'description': 'Service binary'},    |
|                    | {'name': 'host', 'description': 'Host Name'},           |
|                    | {'name': 'zone', 'description': 'Availability Zone'},   |
|                    | {'name': 'status', 'description': 'Status of service'}, |
|                    | {'name': 'state', 'description': 'State of service'},   |
|                    | {'name': 'updated_at', 'description': 'Last updated     |
|                    | time'},                                                 |
|                    | {'name': 'disabled_reason', 'description': 'Disabled    |
|                    | reason'}                                                |
|                    |                                                         |
| availability_zones | {'name': 'zone', 'description': 'Availability zone      |
|                    | name'},                                                 |
|                    | {'name': 'state', 'description': 'Availability zone     |
|                    | state'}                                                 |
|                    |                                                         |
| hosts              | {'name': 'host_name', 'description': 'Name of host'},   |
|                    | {'name': 'service', 'description': 'Enabled service'},  |
|                    | {'name': 'zone', 'description': 'The availability zone  |
|                    | of host'}                                               |
|                    |                                                         |
| servers            | {'name': 'id', 'description': 'The UUID for the         |
|                    | server'},                                               |
|                    | {'name': 'name', 'description': 'Name of the server'},  |
|                    | {'name': 'host_id', 'description': 'The UUID for the    |
|                    | host'},                                                 |
|                    | {'name': 'status', 'description': 'The server status'}, |
|                    | {'name': 'tenant_id', 'description': 'The tenant ID'},  |
|                    | {'name': 'user_id', 'description': 'The user ID of the  |
|                    | user who owns the server'},                             |
|                    | {'name': 'image_id', 'description': 'Name or ID of      |
|                    | image'},                                                |
|                    | {'name': 'flavor_id', 'description': 'ID of the         |
|                    | flavor'},                                               |
|                    | {'name': 'zone', 'description': 'The availability zone  |
|                    | of host'},                                              |
|                    | {'name': 'host_name', 'description': 'The hostname of   |
|                    | hypervisor where the server is running'}                |
|                    |                                                         |
+--------------------+---------------------------------------------------------+
+./scripts/manual_testing/general.sh:main:23  openstack congress datasource status show nova2
+-------------------+----------------------------+
| Field             | Value                      |
+-------------------+----------------------------+
| initialized       | True                       |
| last_error        | None                       |
| last_updated      | 2017-08-08 12:22:27.180858 |
| number_of_updates | 7                          |
| subscribers       | []                         |
| subscriptions     | []                         |
+-------------------+----------------------------+
+./scripts/manual_testing/general.sh:main:24  openstack congress datasource status show 3bf88455-8b22-4327-81d2-0189aea0325c
+-------------------+----------------------------+
| Field             | Value                      |
+-------------------+----------------------------+
| initialized       | True                       |
| last_error        | None                       |
| last_updated      | 2017-08-08 12:22:32.788273 |
| number_of_updates | 8                          |
| subscribers       | []                         |
| subscriptions     | []                         |
+-------------------+----------------------------+
+./scripts/manual_testing/general.sh:main:25  openstack congress datasource table list nova2
+--------------------+
| id                 |
+--------------------+
| flavors            |
| services           |
| availability_zones |
| hosts              |
| servers            |
+--------------------+
+./scripts/manual_testing/general.sh:main:26  openstack congress datasource table list 3bf88455-8b22-4327-81d2-0189aea0325c
+--------------------+
| id                 |
+--------------------+
| flavors            |
| services           |
| availability_zones |
| hosts              |
| servers            |
+--------------------+
+./scripts/manual_testing/general.sh:main:27  openstack congress datasource table schema show nova2 flavors
+-------------+----------------------------+
| name        | description                |
+-------------+----------------------------+
| id          | ID of the flavor           |
| name        | Name of the flavor         |
| vcpus       | Number of vcpus            |
| ram         | Memory size in MB          |
| disk        | Disk size in GB            |
| ephemeral   | Ephemeral space size in GB |
| rxtx_factor | RX/TX factor               |
+-------------+----------------------------+
+./scripts/manual_testing/general.sh:main:28  openstack congress datasource table schema show 3bf88455-8b22-4327-81d2-0189aea0325c flavors
+-------------+----------------------------+
| name        | description                |
+-------------+----------------------------+
| id          | ID of the flavor           |
| name        | Name of the flavor         |
| vcpus       | Number of vcpus            |
| ram         | Memory size in MB          |
| disk        | Disk size in GB            |
| ephemeral   | Ephemeral space size in GB |
| rxtx_factor | RX/TX factor               |
+-------------+----------------------------+
+./scripts/manual_testing/general.sh:main:29  openstack congress datasource table show nova2 flavors
+-------+---------+
| Field | Value   |
+-------+---------+
| id    | flavors |
+-------+---------+
+./scripts/manual_testing/general.sh:main:30  openstack congress datasource table show 3bf88455-8b22-4327-81d2-0189aea0325c flavors
+-------+---------+
| Field | Value   |
+-------+---------+
| id    | flavors |
+-------+---------+
+./scripts/manual_testing/general.sh:main:31  openstack congress driver config show nova
+-------------+----------------------------------------------------------------+
| Field       | Value                                                          |
+-------------+----------------------------------------------------------------+
| config      | {u'username': u'required', u'lazy_tables': u'(optional)',      |
|             | u'project_name': u'(optional)', u'tenant_name': u'required',   |
|             | u'region': u'(optional)', u'endpoint': u'(optional)',          |
|             | u'auth_url': u'required', u'password': u'required',            |
|             | u'poll_time': u'(optional)', u'api_version': u'(optional)'}    |
| description | Datasource driver that interfaces with OpenStack Compute aka   |
|             | nova.                                                          |
| id          | nova                                                           |
| module      | congress.datasources.nova_driver.NovaDriver                    |
| secret      | [u'password']                                                  |
+-------------+----------------------------------------------------------------+
+./scripts/manual_testing/general.sh:main:32  openstack congress driver list
+-----------------+------------------------------------------------------------+
| id              | description                                                |
+-----------------+------------------------------------------------------------+
| ceilometer      | Datasource driver that interfaces with ceilometer.         |
| plexxi          | Datasource driver that interfaces with PlexxiCore.         |
| doctor          | Datasource driver that allows external systems to push     |
|                 | data in accordance with OPNFV Doctor Inspector southbound  |
|                 | interface specification.                                   |
| swift           | Datasource driver that interfaces with swift.              |
| neutronv2       | Datasource driver that interfaces with OpenStack           |
|                 | Networking aka Neutron.                                    |
| heat            | Datasource driver that interfaces with OpenStack           |
|                 | orchestration aka heat.                                    |
| nova            | Datasource driver that interfaces with OpenStack Compute   |
|                 | aka nova.                                                  |
| murano          | Datasource driver that interfaces with murano              |
| aodh            | Datasource driver that interfaces with aodh.               |
| ironic          | Datasource driver that interfaces with OpenStack bare      |
|                 | metal aka ironic.                                          |
| cinder          | Datasource driver that interfaces with OpenStack cinder.   |
| vcenter         | Datasource driver that interfaces with vcenter             |
| glancev2        | Datasource driver that interfaces with OpenStack Images    |
|                 | aka Glance.                                                |
| fake_datasource | This is a fake driver used for testing                     |
| keystonev3      | Datasource driver that interfaces with keystone.           |
+-----------------+------------------------------------------------------------+
+./scripts/manual_testing/general.sh:main:33  openstack congress driver schema show nova
+--------------------+---------------------------------------------------------+
| table              | columns                                                 |
+--------------------+---------------------------------------------------------+
| flavors            | {'name': 'id', 'description': 'ID of the flavor'},      |
|                    | {'name': 'name', 'description': 'Name of the flavor'},  |
|                    | {'name': 'vcpus', 'description': 'Number of vcpus'},    |
|                    | {'name': 'ram', 'description': 'Memory size in MB'},    |
|                    | {'name': 'disk', 'description': 'Disk size in GB'},     |
|                    | {'name': 'ephemeral', 'description': 'Ephemeral space   |
|                    | size in GB'},                                           |
|                    | {'name': 'rxtx_factor', 'description': 'RX/TX factor'}  |
|                    |                                                         |
| services           | {'name': 'service_id', 'description': 'Service ID'},    |
|                    | {'name': 'binary', 'description': 'Service binary'},    |
|                    | {'name': 'host', 'description': 'Host Name'},           |
|                    | {'name': 'zone', 'description': 'Availability Zone'},   |
|                    | {'name': 'status', 'description': 'Status of service'}, |
|                    | {'name': 'state', 'description': 'State of service'},   |
|                    | {'name': 'updated_at', 'description': 'Last updated     |
|                    | time'},                                                 |
|                    | {'name': 'disabled_reason', 'description': 'Disabled    |
|                    | reason'}                                                |
|                    |                                                         |
| availability_zones | {'name': 'zone', 'description': 'Availability zone      |
|                    | name'},                                                 |
|                    | {'name': 'state', 'description': 'Availability zone     |
|                    | state'}                                                 |
|                    |                                                         |
| hosts              | {'name': 'host_name', 'description': 'Name of host'},   |
|                    | {'name': 'service', 'description': 'Enabled service'},  |
|                    | {'name': 'zone', 'description': 'The availability zone  |
|                    | of host'}                                               |
|                    |                                                         |
| servers            | {'name': 'id', 'description': 'The UUID for the         |
|                    | server'},                                               |
|                    | {'name': 'name', 'description': 'Name of the server'},  |
|                    | {'name': 'host_id', 'description': 'The UUID for the    |
|                    | host'},                                                 |
|                    | {'name': 'status', 'description': 'The server status'}, |
|                    | {'name': 'tenant_id', 'description': 'The tenant ID'},  |
|                    | {'name': 'user_id', 'description': 'The user ID of the  |
|                    | user who owns the server'},                             |
|                    | {'name': 'image_id', 'description': 'Name or ID of      |
|                    | image'},                                                |
|                    | {'name': 'flavor_id', 'description': 'ID of the         |
|                    | flavor'},                                               |
|                    | {'name': 'zone', 'description': 'The availability zone  |
|                    | of host'},                                              |
|                    | {'name': 'host_name', 'description': 'The hostname of   |
|                    | hypervisor where the server is running'}                |
|                    |                                                         |
+--------------------+---------------------------------------------------------+
+./scripts/manual_testing/general.sh:main:34  openstack congress datasource row list nova flavors
+----+-----------+-------+-------+------+-----------+-------------+
| id | name      | vcpus |   ram | disk | ephemeral | rxtx_factor |
+----+-----------+-------+-------+------+-----------+-------------+
| 5  | m1.xlarge |     8 | 16384 |  160 |         0 |         1.0 |
| c1 | cirros256 |     1 |   256 |    0 |         0 |         1.0 |
| 84 | m1.micro  |     1 |   128 |    0 |         0 |         1.0 |
| 4  | m1.large  |     4 |  8192 |   80 |         0 |         1.0 |
| d3 | ds2G      |     2 |  2048 |   10 |         0 |         1.0 |
| 3  | m1.medium |     2 |  4096 |   40 |         0 |         1.0 |
| 42 | m1.nano   |     1 |    64 |    0 |         0 |         1.0 |
| 2  | m1.small  |     1 |  2048 |   20 |         0 |         1.0 |
| d4 | ds4G      |     4 |  4096 |   20 |         0 |         1.0 |
| 1  | m1.tiny   |     1 |   512 |    1 |         0 |         1.0 |
| d2 | ds1G      |     1 |  1024 |   10 |         0 |         1.0 |
| d1 | ds512M    |     1 |   512 |    5 |         0 |         1.0 |
+----+-----------+-------+-------+------+-----------+-------------+
+./scripts/manual_testing/general.sh:main:35  openstack congress datasource row list nova2 flavors
+----+-----------+-------+-------+------+-----------+-------------+
| id | name      | vcpus |   ram | disk | ephemeral | rxtx_factor |
+----+-----------+-------+-------+------+-----------+-------------+
| 5  | m1.xlarge |     8 | 16384 |  160 |         0 |         1.0 |
| c1 | cirros256 |     1 |   256 |    0 |         0 |         1.0 |
| 84 | m1.micro  |     1 |   128 |    0 |         0 |         1.0 |
| 4  | m1.large  |     4 |  8192 |   80 |         0 |         1.0 |
| d3 | ds2G      |     2 |  2048 |   10 |         0 |         1.0 |
| 3  | m1.medium |     2 |  4096 |   40 |         0 |         1.0 |
| 42 | m1.nano   |     1 |    64 |    0 |         0 |         1.0 |
| 2  | m1.small  |     1 |  2048 |   20 |         0 |         1.0 |
| d4 | ds4G      |     4 |  4096 |   20 |         0 |         1.0 |
| 1  | m1.tiny   |     1 |   512 |    1 |         0 |         1.0 |
| d2 | ds1G      |     1 |  1024 |   10 |         0 |         1.0 |
| d1 | ds512M    |     1 |   512 |    5 |         0 |         1.0 |
+----+-----------+-------+-------+------+-----------+-------------+
+./scripts/manual_testing/general.sh:main:36  openstack congress datasource row list 3bf88455-8b22-4327-81d2-0189aea0325c flavors
+----+-----------+-------+-------+------+-----------+-------------+
| id | name      | vcpus |   ram | disk | ephemeral | rxtx_factor |
+----+-----------+-------+-------+------+-----------+-------------+
| 5  | m1.xlarge |     8 | 16384 |  160 |         0 |         1.0 |
| c1 | cirros256 |     1 |   256 |    0 |         0 |         1.0 |
| 84 | m1.micro  |     1 |   128 |    0 |         0 |         1.0 |
| 4  | m1.large  |     4 |  8192 |   80 |         0 |         1.0 |
| d3 | ds2G      |     2 |  2048 |   10 |         0 |         1.0 |
| 3  | m1.medium |     2 |  4096 |   40 |         0 |         1.0 |
| 42 | m1.nano   |     1 |    64 |    0 |         0 |         1.0 |
| 2  | m1.small  |     1 |  2048 |   20 |         0 |         1.0 |
| d4 | ds4G      |     4 |  4096 |   20 |         0 |         1.0 |
| 1  | m1.tiny   |     1 |   512 |    1 |         0 |         1.0 |
| d2 | ds1G      |     1 |  1024 |   10 |         0 |         1.0 |
| d1 | ds512M    |     1 |   512 |    5 |         0 |         1.0 |
+----+-----------+-------+-------+------+-----------+-------------+
+./scripts/manual_testing/general.sh:main:37  openstack congress datasource delete nova2
++./scripts/manual_testing/general.sh:main:39  openstack congress policy create policy1 -f value
++./scripts/manual_testing/general.sh:main:39  sed -n 3p
+./scripts/manual_testing/general.sh:main:39  PUUID=a96bca77-d942-49df-a928-d3b5611a6b08
+./scripts/manual_testing/general.sh:main:40  openstack congress policy show policy1
+--------------+--------------------------------------+
| Field        | Value                                |
+--------------+--------------------------------------+
| abbreviation | polic                                |
| description  |                                      |
| id           | a96bca77-d942-49df-a928-d3b5611a6b08 |
| kind         | nonrecursive                         |
| name         | policy1                              |
| owner_id     | user                                 |
+--------------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:41  openstack congress policy show a96bca77-d942-49df-a928-d3b5611a6b08
+--------------+--------------------------------------+
| Field        | Value                                |
+--------------+--------------------------------------+
| abbreviation | polic                                |
| description  |                                      |
| id           | a96bca77-d942-49df-a928-d3b5611a6b08 |
| kind         | nonrecursive                         |
| name         | policy1                              |
| owner_id     | user                                 |
+--------------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:42  openstack congress policy list
+----------------+----------------+----------+--------------+------------------+
| id             | name           | owner_id | kind         | description      |
+----------------+----------------+----------+--------------+------------------+
| 492af02d-5cfc- | classification | user     | nonrecursive | default policy   |
| 4337-a500-22e8 |                |          |              |                  |
| 34bfd5bd       |                |          |              |                  |
| a96bca77-d942- | policy1        | user     | nonrecursive |                  |
| 49df-a928-d3b5 |                |          |              |                  |
| 611a6b08       |                |          |              |                  |
| adcf76c1-1283- | action         | user     | action       | default action   |
| 4048-8bfc-     |                |          |              | policy           |
| f95d1aa87cf2   |                |          |              |                  |
+----------------+----------------+----------+--------------+------------------+
++./scripts/manual_testing/general.sh:main:43  sed -n 2p
++./scripts/manual_testing/general.sh:main:43  openstack congress policy rule create policy1 'temp(1,2)' -f value
+./scripts/manual_testing/general.sh:main:43  UUID=ca7f780a-249c-445d-b5c6-e5408a7f7787
+./scripts/manual_testing/general.sh:main:44  openstack congress policy rule show policy1 ca7f780a-249c-445d-b5c6-e5408a7f7787
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | ca7f780a-249c-445d-b5c6-e5408a7f7787 |
| name    | None                                 |
| rule    | temp(1,2)                            |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:45  openstack congress policy rule delete policy1 ca7f780a-249c-445d-b5c6-e5408a7f7787
+./scripts/manual_testing/general.sh:main:49  openstack congress policy rule create policy1 'q(1,2)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 7b58c59d-9cca-4590-ae43-3d0787f65740 |
| name    | None                                 |
| rule    | q(1,2)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:50  openstack congress policy rule list policy1
// ID: 7b58c59d-9cca-4590-ae43-3d0787f65740
// Name: None
q(1,2)

+./scripts/manual_testing/general.sh:main:52  openstack congress policy rule create policy1 'q(2,3)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 63699887-bb25-4de7-a458-b4e8e66e157c |
| name    | None                                 |
| rule    | q(2,3)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:53  openstack congress policy rule create policy1 'p(x,y) :- q(x,y), r(y,x)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 542dba67-1084-450d-be64-972efe836cff |
| name    | None                                 |
| rule    | p(x,y) :-                            |
|         |   q(x,y),                            |
|         |   r(y,x)                             |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:54  openstack congress policy row list policy1 q
+------+------+
| Col0 | Col1 |
+------+------+
|    1 |    2 |
|    2 |    3 |
+------+------+
+./scripts/manual_testing/general.sh:main:56  openstack congress policy row list policy1 p

+./scripts/manual_testing/general.sh:main:57  openstack congress policy rule create policy1 'r(2,1)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | ee6b83e6-82ba-460c-97bf-6b840ef95ab1 |
| name    | None                                 |
| rule    | r(2,1)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:58  openstack congress policy rule create policy1 'r(3,2)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 9c875833-f094-4ee5-98e5-390b1447f10c |
| name    | None                                 |
| rule    | r(3,2)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:59  openstack congress policy rule create policy1 'r(5,7)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | da25b2d8-b4ec-4590-9c69-f57e1433b2a8 |
| name    | None                                 |
| rule    | r(5,7)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:60  openstack congress policy rule create policy1 'r(9,9)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | f254e9ad-2e58-4b7a-8963-264434347e94 |
| name    | None                                 |
| rule    | r(9,9)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:61  openstack congress policy rule create policy1 'q(5,7)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | c3b36f0f-7d62-4ab0-bc5e-a1ba4701421f |
| name    | None                                 |
| rule    | q(5,7)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:63  openstack congress policy table list policy1
+----+
| id |
+----+
| q  |
| p  |
| r  |
+----+
+./scripts/manual_testing/general.sh:main:65  openstack congress policy table show policy1 p
+-------+-------+
| Field | Value |
+-------+-------+
| id    | p     |
+-------+-------+
+./scripts/manual_testing/general.sh:main:67  openstack congress policy row list policy1 q
+------+------+
| Col0 | Col1 |
+------+------+
|    1 |    2 |
|    2 |    3 |
|    5 |    7 |
+------+------+
+./scripts/manual_testing/general.sh:main:68  openstack congress policy row list policy1 r
+------+------+
| Col0 | Col1 |
+------+------+
|    9 |    9 |
|    5 |    7 |
|    2 |    1 |
|    3 |    2 |
+------+------+
+./scripts/manual_testing/general.sh:main:69  openstack congress policy row list policy1 p
+------+------+
| Col0 | Col1 |
+------+------+
|    1 |    2 |
|    2 |    3 |
+------+------+
+./scripts/manual_testing/general.sh:main:70  openstack congress policy rule create policy1 'p(x,y) :- r(x,y), NOT equal(x,9)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | a026b43d-e19e-4069-a487-591ccad645fc |
| name    | None                                 |
| rule    | p(x,y) :-                            |
|         |   r(x,y),                            |
|         |   NOT equal(x,9)                     |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:71  openstack congress policy row list policy1 p
+------+------+
| Col0 | Col1 |
+------+------+
|    3 |    2 |
|    2 |    1 |
|    1 |    2 |
|    5 |    7 |
|    2 |    3 |
+------+------+
+./scripts/manual_testing/general.sh:main:72  openstack congress policy rule create policy1 's(x) :- nova:flavors(vcpus=x), p(x,y)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | a81427c1-4f6f-4a59-9aba-e25cac495b68 |
| name    | None                                 |
| rule    | s(x) :-                              |
|         |   nova:flavors(vcpus=x),             |
|         |   p(x,y)                             |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:73  openstack congress policy rule create policy1 't(x) :- nova:flavors(vcpus=x), NOT s(x)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 5e159024-bdb7-4100-865d-87147fc0ce59 |
| name    | None                                 |
| rule    | t(x) :-                              |
|         |   nova:flavors(vcpus=x),             |
|         |   NOT s(x)                           |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:74  openstack congress policy row list policy1 s
+------+
| Col0 |
+------+
|    2 |
|    1 |
+------+
+./scripts/manual_testing/general.sh:main:75  openstack congress policy row list policy1 t
+------+
| Col0 |
+------+
|    4 |
|    8 |
+------+
+./scripts/manual_testing/general.sh:main:76  openstack congress policy create policy2
+--------------+--------------------------------------+
| Field        | Value                                |
+--------------+--------------------------------------+
| abbreviation | polic                                |
| description  |                                      |
| id           | 72ca89d9-bab2-4df8-9800-7ea9e89873b1 |
| kind         | nonrecursive                         |
| name         | policy2                              |
| owner_id     | user                                 |
+--------------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:77  openstack congress policy rule create policy2 'a(1,2)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 1f3acd0d-aee6-466c-aab8-83ce8d936f1a |
| name    | None                                 |
| rule    | a(1,2)                               |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:78  openstack congress policy row list policy2 a
+------+------+
| Col0 | Col1 |
+------+------+
|    1 |    2 |
+------+------+
+./scripts/manual_testing/general.sh:main:79  openstack congress policy table list policy2
+----+
| id |
+----+
| a  |
+----+
+./scripts/manual_testing/general.sh:main:80  openstack congress policy rule create policy1 'u(x,y) :- q(x,y), NOT policy2:a(x,y)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 4baff1c6-d505-4884-b2ee-c2628570c6dc |
| name    | None                                 |
| rule    | u(x,y) :-                            |
|         |   q(x,y),                            |
|         |   NOT policy2:a(x,y)                 |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:81  openstack congress policy row list policy1 u
+------+------+
| Col0 | Col1 |
+------+------+
|    2 |    3 |
|    5 |    7 |
+------+------+
+./scripts/manual_testing/general.sh:main:82  openstack congress policy delete policy2
+./scripts/manual_testing/general.sh:main:85  openstack congress policy row list policy1 q
+------+------+
| Col0 | Col1 |
+------+------+
|    1 |    2 |
|    2 |    3 |
|    5 |    7 |
+------+------+
+./scripts/manual_testing/general.sh:main:86  openstack congress policy row list policy1 r
+------+------+
| Col0 | Col1 |
+------+------+
|    9 |    9 |
|    5 |    7 |
|    3 |    2 |
|    2 |    1 |
+------+------+
+./scripts/manual_testing/general.sh:main:87  openstack congress policy row list policy1 p
+------+------+
| Col0 | Col1 |
+------+------+
|    3 |    2 |
|    2 |    1 |
|    1 |    2 |
|    5 |    7 |
|    2 |    3 |
+------+------+
+./scripts/manual_testing/general.sh:main:88  openstack congress policy row list policy1 s
+------+
| Col0 |
+------+
|    2 |
|    1 |
+------+
+./scripts/manual_testing/general.sh:main:89  openstack congress policy row list policy1 t
+------+
| Col0 |
+------+
|    4 |
|    8 |
+------+
+./scripts/manual_testing/general.sh:main:92  openstack congress policy rule create policy1 'execute[nova:flavors.delete(id)] :- nova:flavors(id=id,vcpus=x),s(x), q(10,10)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 67edcc55-ad31-4793-9017-17df99a230d0 |
| name    | None                                 |
| rule    | execute[nova:flavors.delete(id)] :-  |
|         |   nova:flavors(id=id,vcpus=x),       |
|         |   s(x),                              |
|         |   q(10,10)                           |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:93  openstack congress policy row list policy1 s
+------+
| Col0 |
+------+
|    2 |
|    1 |
+------+
+./scripts/manual_testing/general.sh:main:96  openstack congress datasource delete nova
++./scripts/manual_testing/general.sh:main:97  sed -n 5p
++./scripts/manual_testing/general.sh:main:97  openstack congress datasource create --config username=admin --config tenant_name=admin --config auth_url=http://127.0.0.1/identity --config password=password --config poll_time=5 nova nova -f value
+./scripts/manual_testing/general.sh:main:97  UUID=1e3e1d8a-fad3-42eb-928f-29e602641cf8
+./scripts/manual_testing/general.sh:main:98  openstack congress datasource row list nova flavors
+----+-----------+-------+-------+------+-----------+-------------+
| id | name      | vcpus |   ram | disk | ephemeral | rxtx_factor |
+----+-----------+-------+-------+------+-----------+-------------+
| 5  | m1.xlarge |     8 | 16384 |  160 |         0 |         1.0 |
| c1 | cirros256 |     1 |   256 |    0 |         0 |         1.0 |
| 84 | m1.micro  |     1 |   128 |    0 |         0 |         1.0 |
| 4  | m1.large  |     4 |  8192 |   80 |         0 |         1.0 |
| d3 | ds2G      |     2 |  2048 |   10 |         0 |         1.0 |
| 3  | m1.medium |     2 |  4096 |   40 |         0 |         1.0 |
| 42 | m1.nano   |     1 |    64 |    0 |         0 |         1.0 |
| 2  | m1.small  |     1 |  2048 |   20 |         0 |         1.0 |
| d4 | ds4G      |     4 |  4096 |   20 |         0 |         1.0 |
| 1  | m1.tiny   |     1 |   512 |    1 |         0 |         1.0 |
| d2 | ds1G      |     1 |  1024 |   10 |         0 |         1.0 |
| d1 | ds512M    |     1 |   512 |    5 |         0 |         1.0 |
+----+-----------+-------+-------+------+-----------+-------------+
+./scripts/manual_testing/general.sh:main:99  openstack congress policy rule create policy1 'q(10,10)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 3b148e9b-3a96-45d2-a6d8-44c8ebf93608 |
| name    | None                                 |
| rule    | q(10,10)                             |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:100  openstack congress policy row list policy1 s

+./scripts/manual_testing/general.sh:main:101  openstack congress datasource row list 1e3e1d8a-fad3-42eb-928f-29e602641cf8 flavors
+----+-----------+-------+-------+------+-----------+-------------+
| id | name      | vcpus |   ram | disk | ephemeral | rxtx_factor |
+----+-----------+-------+-------+------+-----------+-------------+
| d4 | ds4G      |     4 |  4096 |   20 |         0 |         1.0 |
| 5  | m1.xlarge |     8 | 16384 |  160 |         0 |         1.0 |
| 4  | m1.large  |     4 |  8192 |   80 |         0 |         1.0 |
+----+-----------+-------+-------+------+-----------+-------------+
+./scripts/manual_testing/general.sh:main:104  openstack congress policy rule create policy1 'simA(x) :- simB(x)'
+---------+--------------------------------------+
| Field   | Value                                |
+---------+--------------------------------------+
| comment |                                      |
| id      | 11901c25-25d9-45ba-9ae4-3c6c715b703f |
| name    | None                                 |
| rule    | simA(x) :-                           |
|         |   simB(x)                            |
+---------+--------------------------------------+
+./scripts/manual_testing/general.sh:main:105  openstack congress policy simulate policy1 'simA(x)' 'simB+(1)' action
simA(1)
+./scripts/manual_testing/general.sh:main:108  openstack congress policy delete a96bca77-d942-49df-a928-d3b5611a6b08
+./scripts/manual_testing/general.sh:main:109  openstack congress policy list
+----------------+----------------+----------+--------------+------------------+
| id             | name           | owner_id | kind         | description      |
+----------------+----------------+----------+--------------+------------------+
| 492af02d-5cfc- | classification | user     | nonrecursive | default policy   |
| 4337-a500-22e8 |                |          |              |                  |
| 34bfd5bd       |                |          |              |                  |
| adcf76c1-1283- | action         | user     | action       | default action   |
| 4048-8bfc-     |                |          |              | policy           |
| f95d1aa87cf2   |                |          |              |                  |
+----------------+----------------+----------+--------------+------------------+